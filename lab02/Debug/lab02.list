
lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d40  08005d40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012f28  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f9c  20012f9c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129de  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a7b  00000000  00000000  00032a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00035500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  000365b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002308e  00000000  00000000  00037558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fd2  00000000  00000000  0005a5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2e69  00000000  00000000  0006e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141421  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004998  00000000  00000000  00141474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bec 	.word	0x08005bec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005bec 	.word	0x08005bec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <TaskMonitor_App>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
BaseType_t xReturned;
TaskHandle_t xHandle=NULL;
//QueueHandle_t MsgQueue = NULL;
void TaskMonitor_App(void *pvParameters){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
for(;;){
	Taskmonitor();
 800058c:	f003 fe8e 	bl	80042ac <Taskmonitor>
	vTaskDelay(2000);
 8000590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000594:	f003 f8e6 	bl	8003764 <vTaskDelay>
	Taskmonitor();
 8000598:	e7f8      	b.n	800058c <TaskMonitor_App+0x8>
	...

0800059c <Red_LED_App>:
	}
}
void Red_LED_App(void *pvParameters){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer =800;
 80005a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80005a8:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Red_LED_App);
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <Red_LED_App+0x28>)
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <Red_LED_App+0x2c>)
 80005b2:	f000 fee4 	bl	800137e <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	f003 f8d4 	bl	8003764 <vTaskDelay>
		Redtimer+=1;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3301      	adds	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Red_LED_App);
 80005c2:	e7f2      	b.n	80005aa <Red_LED_App+0xe>
 80005c4:	0800059d 	.word	0x0800059d
 80005c8:	40020c00 	.word	0x40020c00

080005cc <Green_LED_App>:
	}
}
void Green_LED_App(void *pvParameters){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer =1000;
 80005d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d8:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Green_LED_App);
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <Green_LED_App+0x28>)
 80005dc:	b29b      	uxth	r3, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <Green_LED_App+0x2c>)
 80005e2:	f000 fecc 	bl	800137e <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f003 f8bc 	bl	8003764 <vTaskDelay>
		Greentimer+=2;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3302      	adds	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Green_LED_App);
 80005f2:	e7f2      	b.n	80005da <Green_LED_App+0xe>
 80005f4:	080005cd 	.word	0x080005cd
 80005f8:	40020c00 	.word	0x40020c00

080005fc <Delay_App>:
	}
}
void Delay_App(void *pvParameters){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	int delayflag=0;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
	if(delayflag==0){
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d105      	bne.n	800061a <Delay_App+0x1e>
		delaytime =1000;
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	60bb      	str	r3, [r7, #8]
		delayflag=1;
 8000614:	2301      	movs	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e002      	b.n	8000620 <Delay_App+0x24>
		}else{
		delaytime=0xFFFFFFFF;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	60bb      	str	r3, [r7, #8]
	}
	vTaskDelay(delaytime);
 8000620:	68b8      	ldr	r0, [r7, #8]
 8000622:	f003 f89f 	bl	8003764 <vTaskDelay>
	if(delayflag==0){
 8000626:	e7ef      	b.n	8000608 <Delay_App+0xc>

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fbcd 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f843 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8d5 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f8a9 	bl	8000790 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  TaskHandle_t xHandle = NULL;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
//  MsgQueue = xQueueCreate(1,sizeof(unsigned int));

  //  xTaskCreate(USART_Test,"USART_Test",1024, NULL,14,&xHandle);


  xTaskCreate(TaskMonitor_App,"TaskMonitor_App",512,NULL,3,&xHandle);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2303      	movs	r3, #3
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000650:	4912      	ldr	r1, [pc, #72]	; (800069c <main+0x74>)
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <main+0x78>)
 8000654:	f002 ff48 	bl	80034e8 <xTaskCreate>
  xTaskCreate(Red_LED_App,"Red_LED_App",128,NULL,1,&xHandle);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2301      	movs	r3, #1
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	490f      	ldr	r1, [pc, #60]	; (80006a4 <main+0x7c>)
 8000666:	4810      	ldr	r0, [pc, #64]	; (80006a8 <main+0x80>)
 8000668:	f002 ff3e 	bl	80034e8 <xTaskCreate>
  xTaskCreate(Green_LED_App,"Green_LED_App",128,NULL,1,&xHandle);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	2301      	movs	r3, #1
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	490c      	ldr	r1, [pc, #48]	; (80006ac <main+0x84>)
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <main+0x88>)
 800067c:	f002 ff34 	bl	80034e8 <xTaskCreate>
  xTaskCreate(Delay_App,"Delay_App",128,NULL,14,&xHandle);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	230e      	movs	r3, #14
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2300      	movs	r3, #0
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	4909      	ldr	r1, [pc, #36]	; (80006b4 <main+0x8c>)
 800068e:	480a      	ldr	r0, [pc, #40]	; (80006b8 <main+0x90>)
 8000690:	f002 ff2a 	bl	80034e8 <xTaskCreate>

  vTaskStartScheduler();
 8000694:	f003 f89a 	bl	80037cc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x70>
 800069a:	bf00      	nop
 800069c:	08005c04 	.word	0x08005c04
 80006a0:	08000585 	.word	0x08000585
 80006a4:	08005c14 	.word	0x08005c14
 80006a8:	0800059d 	.word	0x0800059d
 80006ac:	08005c20 	.word	0x08005c20
 80006b0:	080005cd 	.word	0x080005cd
 80006b4:	08005c30 	.word	0x08005c30
 80006b8:	080005fd 	.word	0x080005fd

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fe26 	bl	800531c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000730:	2332      	movs	r3, #50	; 0x32
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000734:	2304      	movs	r3, #4
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000738:	2307      	movs	r3, #7
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fe37 	bl	80013b4 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074c:	f000 f9ba 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f001 f898 	bl	80018a4 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077a:	f000 f9a3 	bl	8000ac4 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f001 fd6c 	bl	80022a4 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f977 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000090 	.word	0x20000090
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	4ba2      	ldr	r3, [pc, #648]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4aa1      	ldr	r2, [pc, #644]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b9f      	ldr	r3, [pc, #636]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	4b9b      	ldr	r3, [pc, #620]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a9a      	ldr	r2, [pc, #616]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b98      	ldr	r3, [pc, #608]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b94      	ldr	r3, [pc, #592]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a93      	ldr	r2, [pc, #588]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b91      	ldr	r3, [pc, #580]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b8d      	ldr	r3, [pc, #564]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a8c      	ldr	r2, [pc, #560]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b8a      	ldr	r3, [pc, #552]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b86      	ldr	r3, [pc, #536]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a85      	ldr	r2, [pc, #532]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b83      	ldr	r3, [pc, #524]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b7f      	ldr	r3, [pc, #508]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a7e      	ldr	r2, [pc, #504]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b7c      	ldr	r3, [pc, #496]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2108      	movs	r1, #8
 80008a6:	4879      	ldr	r0, [pc, #484]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 80008a8:	f000 fd50 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2101      	movs	r1, #1
 80008b0:	4877      	ldr	r0, [pc, #476]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 80008b2:	f000 fd4b 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	2200      	movs	r2, #0
 80008b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008bc:	4875      	ldr	r0, [pc, #468]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 80008be:	f000 fd45 	bl	800134c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	486c      	ldr	r0, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 80008da:	f000 fb9b 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4866      	ldr	r0, [pc, #408]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 80008f6:	f000 fb8d 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008fa:	2308      	movs	r3, #8
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	485e      	ldr	r0, [pc, #376]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 8000916:	f000 fb7d 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	485a      	ldr	r0, [pc, #360]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000930:	f000 fb70 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000934:	2310      	movs	r3, #16
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000944:	2306      	movs	r3, #6
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4852      	ldr	r0, [pc, #328]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000950:	f000 fb60 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000954:	23e0      	movs	r3, #224	; 0xe0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000964:	2305      	movs	r3, #5
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	484a      	ldr	r0, [pc, #296]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000970:	f000 fb50 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000974:	2304      	movs	r3, #4
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4845      	ldr	r0, [pc, #276]	; (8000a9c <MX_GPIO_Init+0x2b8>)
 8000988:	f000 fb44 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099e:	2305      	movs	r3, #5
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	483c      	ldr	r0, [pc, #240]	; (8000a9c <MX_GPIO_Init+0x2b8>)
 80009aa:	f000 fb33 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4833      	ldr	r0, [pc, #204]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 80009c8:	f000 fb24 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009cc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009de:	2306      	movs	r3, #6
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4829      	ldr	r0, [pc, #164]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 80009ea:	f000 fb13 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4825      	ldr	r0, [pc, #148]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000a04:	f000 fb06 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	481c      	ldr	r0, [pc, #112]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000a26:	f000 faf5 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 8000a3e:	f000 fae9 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a48:	2312      	movs	r3, #18
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a54:	2304      	movs	r3, #4
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480f      	ldr	r0, [pc, #60]	; (8000a9c <MX_GPIO_Init+0x2b8>)
 8000a60:	f000 fad8 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 8000a7a:	f000 facb 	bl	8001014 <HAL_GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3730      	adds	r7, #48	; 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab2:	f000 f9ad 	bl	8000e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40001400 	.word	0x40001400

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0x84>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12b      	bne.n	8000b9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <HAL_UART_MspInit+0x8c>)
 8000b96:	f000 fa3d 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <HAL_InitTick+0xe4>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a32      	ldr	r2, [pc, #200]	; (8000c94 <HAL_InitTick+0xe4>)
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <HAL_InitTick+0xe4>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f003 0320 	and.w	r3, r3, #32
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bdc:	f107 0210 	add.w	r2, r7, #16
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 f87c 	bl	8001ce4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d103      	bne.n	8000bfe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bf6:	f001 f84d 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 8000bfa:	6378      	str	r0, [r7, #52]	; 0x34
 8000bfc:	e004      	b.n	8000c08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bfe:	f001 f849 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 8000c02:	4603      	mov	r3, r0
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <HAL_InitTick+0xe8>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	0c9b      	lsrs	r3, r3, #18
 8000c12:	3b01      	subs	r3, #1
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_InitTick+0xec>)
 8000c18:	4a21      	ldr	r2, [pc, #132]	; (8000ca0 <HAL_InitTick+0xf0>)
 8000c1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <HAL_InitTick+0xec>)
 8000c1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c22:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <HAL_InitTick+0xec>)
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_InitTick+0xec>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_InitTick+0xec>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_InitTick+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000c3c:	4817      	ldr	r0, [pc, #92]	; (8000c9c <HAL_InitTick+0xec>)
 8000c3e:	f001 f883 	bl	8001d48 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d11b      	bne.n	8000c88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <HAL_InitTick+0xec>)
 8000c52:	f001 f8d3 	bl	8001dfc <HAL_TIM_Base_Start_IT>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d111      	bne.n	8000c88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c64:	2037      	movs	r0, #55	; 0x37
 8000c66:	f000 f9c7 	bl	8000ff8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d808      	bhi.n	8000c82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	2037      	movs	r0, #55	; 0x37
 8000c76:	f000 f9a3 	bl	8000fc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_InitTick+0xf4>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	e002      	b.n	8000c88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	200000d4 	.word	0x200000d4
 8000ca0:	40001400 	.word	0x40001400
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <TIM7_IRQHandler+0x10>)
 8000cda:	f001 f8ff 	bl	8001edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000d4 	.word	0x200000d4

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f004 fac8 	bl	80052ac <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20020000 	.word	0x20020000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	2000011c 	.word	0x2000011c
 8000d50:	20012fa0 	.word	0x20012fa0

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7e:	490e      	ldr	r1, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d94:	4c0b      	ldr	r4, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da2:	f7ff ffd7 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f004 fa87 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fc3d 	bl	8000628 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dbc:	08005d48 	.word	0x08005d48
  ldr r2, =_sbss
 8000dc0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dc4:	20012f9c 	.word	0x20012f9c

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f8d8 	bl	8000faa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fed8 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fe66 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000120 	.word	0x20000120

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000120 	.word	0x20000120

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff4c 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd2:	f7ff ff61 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8000fd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	6978      	ldr	r0, [r7, #20]
 8000fde:	f7ff ffb1 	bl	8000f44 <NVIC_EncodePriority>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff80 	bl	8000ef0 <__NVIC_SetPriority>
}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff54 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e16b      	b.n	8001308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 815a 	bne.w	8001302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	2b02      	cmp	r3, #2
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80b4 	beq.w	8001302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b60      	ldr	r3, [pc, #384]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a5f      	ldr	r2, [pc, #380]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b5d      	ldr	r3, [pc, #372]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a5b      	ldr	r2, [pc, #364]	; (8001324 <HAL_GPIO_Init+0x310>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a52      	ldr	r2, [pc, #328]	; (8001328 <HAL_GPIO_Init+0x314>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a51      	ldr	r2, [pc, #324]	; (800132c <HAL_GPIO_Init+0x318>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a50      	ldr	r2, [pc, #320]	; (8001330 <HAL_GPIO_Init+0x31c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4f      	ldr	r2, [pc, #316]	; (8001334 <HAL_GPIO_Init+0x320>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4e      	ldr	r2, [pc, #312]	; (8001338 <HAL_GPIO_Init+0x324>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x216>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4d      	ldr	r2, [pc, #308]	; (800133c <HAL_GPIO_Init+0x328>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_GPIO_Init+0x32c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4b      	ldr	r2, [pc, #300]	; (8001344 <HAL_GPIO_Init+0x330>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x20a>
 800121a:	2307      	movs	r3, #7
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x228>
 800121e:	2308      	movs	r3, #8
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x228>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4935      	ldr	r1, [pc, #212]	; (8001324 <HAL_GPIO_Init+0x310>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_GPIO_Init+0x334>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127e:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_GPIO_Init+0x334>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_GPIO_Init+0x334>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae90 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40021000 	.word	0x40021000
 800133c:	40021400 	.word	0x40021400
 8001340:	40021800 	.word	0x40021800
 8001344:	40021c00 	.word	0x40021c00
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	041a      	lsls	r2, r3, #16
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43d9      	mvns	r1, r3
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	400b      	ands	r3, r1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e267      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d075      	beq.n	80014be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d2:	4b88      	ldr	r3, [pc, #544]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d00c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4b85      	ldr	r3, [pc, #532]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4b82      	ldr	r3, [pc, #520]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013f6:	d10b      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	4b7e      	ldr	r3, [pc, #504]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d05b      	beq.n	80014bc <HAL_RCC_OscConfig+0x108>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d157      	bne.n	80014bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e242      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x74>
 800141a:	4b76      	ldr	r3, [pc, #472]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a75      	ldr	r2, [pc, #468]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01d      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6f      	ldr	r2, [pc, #444]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b6d      	ldr	r3, [pc, #436]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6c      	ldr	r2, [pc, #432]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 800144c:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a68      	ldr	r2, [pc, #416]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a65      	ldr	r2, [pc, #404]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fce4 	bl	8000e38 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fce0 	bl	8000e38 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e207      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b5b      	ldr	r3, [pc, #364]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0xc0>
 8001492:	e014      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fcd0 	bl	8000e38 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fccc 	bl	8000e38 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1f3      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0xe8>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d063      	beq.n	8001592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ca:	4b4a      	ldr	r3, [pc, #296]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d11c      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b44      	ldr	r3, [pc, #272]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e1c7      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4937      	ldr	r1, [pc, #220]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	e03a      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fc85 	bl	8000e38 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fc81 	bl	8000e38 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1a8      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4925      	ldr	r1, [pc, #148]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fc64 	bl	8000e38 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fc60 	bl	8000e38 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e187      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d036      	beq.n	800160c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d016      	beq.n	80015d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_RCC_OscConfig+0x248>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fc44 	bl	8000e38 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fc40 	bl	8000e38 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e167      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x200>
 80015d2:	e01b      	b.n	800160c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_OscConfig+0x248>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fc2d 	bl	8000e38 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	e00e      	b.n	8001600 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fc29 	bl	8000e38 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d907      	bls.n	8001600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e150      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 80015f4:	40023800 	.word	0x40023800
 80015f8:	42470000 	.word	0x42470000
 80015fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b88      	ldr	r3, [pc, #544]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ea      	bne.n	80015e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8097 	beq.w	8001748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b81      	ldr	r3, [pc, #516]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10f      	bne.n	800164a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b7d      	ldr	r3, [pc, #500]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a7c      	ldr	r2, [pc, #496]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b7a      	ldr	r3, [pc, #488]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b77      	ldr	r3, [pc, #476]	; (8001828 <HAL_RCC_OscConfig+0x474>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b74      	ldr	r3, [pc, #464]	; (8001828 <HAL_RCC_OscConfig+0x474>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a73      	ldr	r2, [pc, #460]	; (8001828 <HAL_RCC_OscConfig+0x474>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff fbe9 	bl	8000e38 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff fbe5 	bl	8000e38 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e10c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b6a      	ldr	r3, [pc, #424]	; (8001828 <HAL_RCC_OscConfig+0x474>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x2ea>
 8001690:	4b64      	ldr	r3, [pc, #400]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	4a63      	ldr	r2, [pc, #396]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	; 0x70
 800169c:	e01c      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x30c>
 80016a6:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a5e      	ldr	r2, [pc, #376]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
 80016b2:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	4a5b      	ldr	r2, [pc, #364]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6713      	str	r3, [r2, #112]	; 0x70
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 80016c0:	4b58      	ldr	r3, [pc, #352]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	4a57      	ldr	r2, [pc, #348]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	; 0x70
 80016cc:	4b55      	ldr	r3, [pc, #340]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d0:	4a54      	ldr	r2, [pc, #336]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff fbaa 	bl	8000e38 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff fba6 	bl	8000e38 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0cb      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ee      	beq.n	80016e8 <HAL_RCC_OscConfig+0x334>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fb94 	bl	8000e38 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	e00a      	b.n	800172a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff fb90 	bl	8000e38 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0b5      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ee      	bne.n	8001714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b39      	ldr	r3, [pc, #228]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a38      	ldr	r2, [pc, #224]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a1 	beq.w	8001894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001752:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	d05c      	beq.n	8001818 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d141      	bne.n	80017ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <HAL_RCC_OscConfig+0x478>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fb64 	bl	8000e38 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff fb60 	bl	8000e38 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e087      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	3b01      	subs	r3, #1
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	491b      	ldr	r1, [pc, #108]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x478>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fb39 	bl	8000e38 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fb35 	bl	8000e38 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e05c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x416>
 80017e8:	e054      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_RCC_OscConfig+0x478>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb22 	bl	8000e38 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fb1e 	bl	8000e38 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e045      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_RCC_OscConfig+0x470>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x444>
 8001816:	e03d      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e038      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000
 800182c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x4ec>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d028      	beq.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d121      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d11a      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	4293      	cmp	r3, r2
 800186a:	d111      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cc      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d90c      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d044      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d119      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d003      	beq.n	8001962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	2b03      	cmp	r3, #3
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e067      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4934      	ldr	r1, [pc, #208]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff fa50 	bl	8000e38 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff fa4c 	bl	8000e38 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e04f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d20c      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f8b0 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08005cec 	.word	0x08005cec
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a74:	b094      	sub	sp, #80	; 0x50
 8001a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a88:	4b79      	ldr	r3, [pc, #484]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d00d      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	f200 80e1 	bhi.w	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa2:	e0db      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001aa8:	e0db      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aaa:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aae:	e0d8      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aba:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	2200      	movs	r2, #0
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ad0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ade:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	f04f 0000 	mov.w	r0, #0
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	0159      	lsls	r1, r3, #5
 8001af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af4:	0150      	lsls	r0, r2, #5
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4621      	mov	r1, r4
 8001afc:	1a51      	subs	r1, r2, r1
 8001afe:	6139      	str	r1, [r7, #16]
 8001b00:	4629      	mov	r1, r5
 8001b02:	eb63 0301 	sbc.w	r3, r3, r1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b14:	4659      	mov	r1, fp
 8001b16:	018b      	lsls	r3, r1, #6
 8001b18:	4651      	mov	r1, sl
 8001b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1e:	4651      	mov	r1, sl
 8001b20:	018a      	lsls	r2, r1, #6
 8001b22:	4651      	mov	r1, sl
 8001b24:	ebb2 0801 	subs.w	r8, r2, r1
 8001b28:	4659      	mov	r1, fp
 8001b2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b42:	4690      	mov	r8, r2
 8001b44:	4699      	mov	r9, r3
 8001b46:	4623      	mov	r3, r4
 8001b48:	eb18 0303 	adds.w	r3, r8, r3
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	462b      	mov	r3, r5
 8001b50:	eb49 0303 	adc.w	r3, r9, r3
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b62:	4629      	mov	r1, r5
 8001b64:	024b      	lsls	r3, r1, #9
 8001b66:	4621      	mov	r1, r4
 8001b68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	024a      	lsls	r2, r1, #9
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b76:	2200      	movs	r2, #0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b80:	f7fe fb7e 	bl	8000280 <__aeabi_uldivmod>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b8c:	e058      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	2200      	movs	r2, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	4611      	mov	r1, r2
 8001b9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b9e:	623b      	str	r3, [r7, #32]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba8:	4642      	mov	r2, r8
 8001baa:	464b      	mov	r3, r9
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	0159      	lsls	r1, r3, #5
 8001bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bba:	0150      	lsls	r0, r2, #5
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001be0:	ebb2 040a 	subs.w	r4, r2, sl
 8001be4:	eb63 050b 	sbc.w	r5, r3, fp
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	00eb      	lsls	r3, r5, #3
 8001bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf6:	00e2      	lsls	r2, r4, #3
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	4643      	mov	r3, r8
 8001bfe:	18e3      	adds	r3, r4, r3
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	464b      	mov	r3, r9
 8001c04:	eb45 0303 	adc.w	r3, r5, r3
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c16:	4629      	mov	r1, r5
 8001c18:	028b      	lsls	r3, r1, #10
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c20:	4621      	mov	r1, r4
 8001c22:	028a      	lsls	r2, r1, #10
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	61fa      	str	r2, [r7, #28]
 8001c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c34:	f7fe fb24 	bl	8000280 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3750      	adds	r7, #80	; 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0a9b      	lsrs	r3, r3, #10
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08005cfc 	.word	0x08005cfc

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cc0:	f7ff ffdc 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0b5b      	lsrs	r3, r3, #13
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08005cfc 	.word	0x08005cfc

08001ce4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_RCC_GetClockConfig+0x60>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0207 	and.w	r2, r3, #7
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40023c00 	.word	0x40023c00

08001d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e041      	b.n	8001dde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f839 	bl	8001de6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3304      	adds	r3, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f000 f9d8 	bl	800213c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e04e      	b.n	8001eb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a23      	ldr	r2, [pc, #140]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3e:	d01d      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d111      	bne.n	8001ea0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d010      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9e:	e007      	b.n	8001eb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	40000c00 	.word	0x40000c00
 8001ed0:	40010400 	.word	0x40010400
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40001800 	.word	0x40001800

08001edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d122      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d11b      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0202 	mvn.w	r2, #2
 8001f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8ee 	bl	8002100 <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8e0 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f8f1 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d122      	bne.n	8001f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d11b      	bne.n	8001f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0204 	mvn.w	r2, #4
 8001f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8c4 	bl	8002100 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8b6 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8c7 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d122      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0208 	mvn.w	r2, #8
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f89a 	bl	8002100 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f88c 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f89d 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d122      	bne.n	8002034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d11b      	bne.n	8002034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0210 	mvn.w	r2, #16
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2208      	movs	r2, #8
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f870 	bl	8002100 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f862 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f873 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0201 	mvn.w	r2, #1
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe fd20 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b80      	cmp	r3, #128	; 0x80
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002078:	2b80      	cmp	r3, #128	; 0x80
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f902 	bl	8002290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	2b40      	cmp	r3, #64	; 0x40
 80020a6:	d107      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f838 	bl	8002128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0220 	mvn.w	r2, #32
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8cc 	bl	800227c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a40      	ldr	r2, [pc, #256]	; (8002250 <TIM_Base_SetConfig+0x114>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215a:	d00f      	beq.n	800217c <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3d      	ldr	r2, [pc, #244]	; (8002254 <TIM_Base_SetConfig+0x118>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00b      	beq.n	800217c <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <TIM_Base_SetConfig+0x11c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d007      	beq.n	800217c <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3b      	ldr	r2, [pc, #236]	; (800225c <TIM_Base_SetConfig+0x120>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3a      	ldr	r2, [pc, #232]	; (8002260 <TIM_Base_SetConfig+0x124>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d108      	bne.n	800218e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <TIM_Base_SetConfig+0x114>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02b      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219c:	d027      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2c      	ldr	r2, [pc, #176]	; (8002254 <TIM_Base_SetConfig+0x118>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d023      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2b      	ldr	r2, [pc, #172]	; (8002258 <TIM_Base_SetConfig+0x11c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01f      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2a      	ldr	r2, [pc, #168]	; (800225c <TIM_Base_SetConfig+0x120>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01b      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <TIM_Base_SetConfig+0x124>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d017      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a28      	ldr	r2, [pc, #160]	; (8002264 <TIM_Base_SetConfig+0x128>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a27      	ldr	r2, [pc, #156]	; (8002268 <TIM_Base_SetConfig+0x12c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00f      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a26      	ldr	r2, [pc, #152]	; (800226c <TIM_Base_SetConfig+0x130>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00b      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a25      	ldr	r2, [pc, #148]	; (8002270 <TIM_Base_SetConfig+0x134>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a24      	ldr	r2, [pc, #144]	; (8002274 <TIM_Base_SetConfig+0x138>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d003      	beq.n	80021ee <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a23      	ldr	r2, [pc, #140]	; (8002278 <TIM_Base_SetConfig+0x13c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d108      	bne.n	8002200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <TIM_Base_SetConfig+0x114>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d003      	beq.n	8002234 <TIM_Base_SetConfig+0xf8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <TIM_Base_SetConfig+0x124>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d103      	bne.n	800223c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	615a      	str	r2, [r3, #20]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40010000 	.word	0x40010000
 8002254:	40000400 	.word	0x40000400
 8002258:	40000800 	.word	0x40000800
 800225c:	40000c00 	.word	0x40000c00
 8002260:	40010400 	.word	0x40010400
 8002264:	40014000 	.word	0x40014000
 8002268:	40014400 	.word	0x40014400
 800226c:	40014800 	.word	0x40014800
 8002270:	40001800 	.word	0x40001800
 8002274:	40001c00 	.word	0x40001c00
 8002278:	40002000 	.word	0x40002000

0800227c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e03f      	b.n	8002336 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fc28 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2224      	movs	r2, #36	; 0x24
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f929 	bl	8002540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800230c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800231c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b08a      	sub	sp, #40	; 0x28
 8002342:	af02      	add	r7, sp, #8
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b20      	cmp	r3, #32
 800235c:	d17c      	bne.n	8002458 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_UART_Transmit+0x2c>
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e075      	b.n	800245a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_UART_Transmit+0x3e>
 8002378:	2302      	movs	r3, #2
 800237a:	e06e      	b.n	800245a <HAL_UART_Transmit+0x11c>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2221      	movs	r2, #33	; 0x21
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002392:	f7fe fd51 	bl	8000e38 <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	88fa      	ldrh	r2, [r7, #6]
 800239c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	88fa      	ldrh	r2, [r7, #6]
 80023a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ac:	d108      	bne.n	80023c0 <HAL_UART_Transmit+0x82>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	e003      	b.n	80023c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023d0:	e02a      	b.n	8002428 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f840 	bl	8002462 <UART_WaitOnFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e036      	b.n	800245a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10b      	bne.n	800240a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	3302      	adds	r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	e007      	b.n	800241a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3301      	adds	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1cf      	bne.n	80023d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	2140      	movs	r1, #64	; 0x40
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f810 	bl	8002462 <UART_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e006      	b.n	800245a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b090      	sub	sp, #64	; 0x40
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002472:	e050      	b.n	8002516 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800247a:	d04c      	beq.n	8002516 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800247c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <UART_WaitOnFlagUntilTimeout+0x30>
 8002482:	f7fe fcd9 	bl	8000e38 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800248e:	429a      	cmp	r2, r3
 8002490:	d241      	bcs.n	8002516 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	e853 3f00 	ldrex	r3, [r3]
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024b2:	637a      	str	r2, [r7, #52]	; 0x34
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ba:	e841 2300 	strex	r3, r2, [r1]
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e5      	bne.n	8002492 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3314      	adds	r3, #20
 80024cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	e853 3f00 	ldrex	r3, [r3]
 80024d4:	613b      	str	r3, [r7, #16]
   return(result);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3314      	adds	r3, #20
 80024e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e6:	623a      	str	r2, [r7, #32]
 80024e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ea:	69f9      	ldr	r1, [r7, #28]
 80024ec:	6a3a      	ldr	r2, [r7, #32]
 80024ee:	e841 2300 	strex	r3, r2, [r1]
 80024f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1e5      	bne.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e00f      	b.n	8002536 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4013      	ands	r3, r2
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	429a      	cmp	r2, r3
 8002524:	bf0c      	ite	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	2300      	movne	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	429a      	cmp	r2, r3
 8002532:	d09f      	beq.n	8002474 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3740      	adds	r7, #64	; 0x40
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002544:	b0c0      	sub	sp, #256	; 0x100
 8002546:	af00      	add	r7, sp, #0
 8002548:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	68d9      	ldr	r1, [r3, #12]
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	ea40 0301 	orr.w	r3, r0, r1
 8002568:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800256a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	431a      	orrs	r2, r3
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	431a      	orrs	r2, r3
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002598:	f021 010c 	bic.w	r1, r1, #12
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025a6:	430b      	orrs	r3, r1
 80025a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ba:	6999      	ldr	r1, [r3, #24]
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	ea40 0301 	orr.w	r3, r0, r1
 80025c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b8f      	ldr	r3, [pc, #572]	; (800280c <UART_SetConfig+0x2cc>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d005      	beq.n	80025e0 <UART_SetConfig+0xa0>
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b8d      	ldr	r3, [pc, #564]	; (8002810 <UART_SetConfig+0x2d0>)
 80025dc:	429a      	cmp	r2, r3
 80025de:	d104      	bne.n	80025ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025e0:	f7ff fb6c 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 80025e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025e8:	e003      	b.n	80025f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ea:	f7ff fb53 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 80025ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fc:	f040 810c 	bne.w	8002818 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002604:	2200      	movs	r2, #0
 8002606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800260a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800260e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002612:	4622      	mov	r2, r4
 8002614:	462b      	mov	r3, r5
 8002616:	1891      	adds	r1, r2, r2
 8002618:	65b9      	str	r1, [r7, #88]	; 0x58
 800261a:	415b      	adcs	r3, r3
 800261c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800261e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002622:	4621      	mov	r1, r4
 8002624:	eb12 0801 	adds.w	r8, r2, r1
 8002628:	4629      	mov	r1, r5
 800262a:	eb43 0901 	adc.w	r9, r3, r1
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800263a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800263e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002642:	4690      	mov	r8, r2
 8002644:	4699      	mov	r9, r3
 8002646:	4623      	mov	r3, r4
 8002648:	eb18 0303 	adds.w	r3, r8, r3
 800264c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002650:	462b      	mov	r3, r5
 8002652:	eb49 0303 	adc.w	r3, r9, r3
 8002656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002666:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800266a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800266e:	460b      	mov	r3, r1
 8002670:	18db      	adds	r3, r3, r3
 8002672:	653b      	str	r3, [r7, #80]	; 0x50
 8002674:	4613      	mov	r3, r2
 8002676:	eb42 0303 	adc.w	r3, r2, r3
 800267a:	657b      	str	r3, [r7, #84]	; 0x54
 800267c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002680:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002684:	f7fd fdfc 	bl	8000280 <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <UART_SetConfig+0x2d4>)
 800268e:	fba3 2302 	umull	r2, r3, r3, r2
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	011c      	lsls	r4, r3, #4
 8002696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800269a:	2200      	movs	r2, #0
 800269c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026a8:	4642      	mov	r2, r8
 80026aa:	464b      	mov	r3, r9
 80026ac:	1891      	adds	r1, r2, r2
 80026ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80026b0:	415b      	adcs	r3, r3
 80026b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026b8:	4641      	mov	r1, r8
 80026ba:	eb12 0a01 	adds.w	sl, r2, r1
 80026be:	4649      	mov	r1, r9
 80026c0:	eb43 0b01 	adc.w	fp, r3, r1
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026d8:	4692      	mov	sl, r2
 80026da:	469b      	mov	fp, r3
 80026dc:	4643      	mov	r3, r8
 80026de:	eb1a 0303 	adds.w	r3, sl, r3
 80026e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026e6:	464b      	mov	r3, r9
 80026e8:	eb4b 0303 	adc.w	r3, fp, r3
 80026ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002700:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002704:	460b      	mov	r3, r1
 8002706:	18db      	adds	r3, r3, r3
 8002708:	643b      	str	r3, [r7, #64]	; 0x40
 800270a:	4613      	mov	r3, r2
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
 8002712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002716:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800271a:	f7fd fdb1 	bl	8000280 <__aeabi_uldivmod>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4611      	mov	r1, r2
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <UART_SetConfig+0x2d4>)
 8002726:	fba3 2301 	umull	r2, r3, r3, r1
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2264      	movs	r2, #100	; 0x64
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	1acb      	subs	r3, r1, r3
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <UART_SetConfig+0x2d4>)
 800273c:	fba3 2302 	umull	r2, r3, r3, r2
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002748:	441c      	add	r4, r3
 800274a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002754:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002758:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800275c:	4642      	mov	r2, r8
 800275e:	464b      	mov	r3, r9
 8002760:	1891      	adds	r1, r2, r2
 8002762:	63b9      	str	r1, [r7, #56]	; 0x38
 8002764:	415b      	adcs	r3, r3
 8002766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800276c:	4641      	mov	r1, r8
 800276e:	1851      	adds	r1, r2, r1
 8002770:	6339      	str	r1, [r7, #48]	; 0x30
 8002772:	4649      	mov	r1, r9
 8002774:	414b      	adcs	r3, r1
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002784:	4659      	mov	r1, fp
 8002786:	00cb      	lsls	r3, r1, #3
 8002788:	4651      	mov	r1, sl
 800278a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800278e:	4651      	mov	r1, sl
 8002790:	00ca      	lsls	r2, r1, #3
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	4603      	mov	r3, r0
 8002798:	4642      	mov	r2, r8
 800279a:	189b      	adds	r3, r3, r2
 800279c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027a0:	464b      	mov	r3, r9
 80027a2:	460a      	mov	r2, r1
 80027a4:	eb42 0303 	adc.w	r3, r2, r3
 80027a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027c0:	460b      	mov	r3, r1
 80027c2:	18db      	adds	r3, r3, r3
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c6:	4613      	mov	r3, r2
 80027c8:	eb42 0303 	adc.w	r3, r2, r3
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027d6:	f7fd fd53 	bl	8000280 <__aeabi_uldivmod>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <UART_SetConfig+0x2d4>)
 80027e0:	fba3 1302 	umull	r1, r3, r3, r2
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	2164      	movs	r1, #100	; 0x64
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	3332      	adds	r3, #50	; 0x32
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <UART_SetConfig+0x2d4>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	f003 0207 	and.w	r2, r3, #7
 80027fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4422      	add	r2, r4
 8002806:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002808:	e105      	b.n	8002a16 <UART_SetConfig+0x4d6>
 800280a:	bf00      	nop
 800280c:	40011000 	.word	0x40011000
 8002810:	40011400 	.word	0x40011400
 8002814:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800281c:	2200      	movs	r2, #0
 800281e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002822:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002826:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800282a:	4642      	mov	r2, r8
 800282c:	464b      	mov	r3, r9
 800282e:	1891      	adds	r1, r2, r2
 8002830:	6239      	str	r1, [r7, #32]
 8002832:	415b      	adcs	r3, r3
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800283a:	4641      	mov	r1, r8
 800283c:	1854      	adds	r4, r2, r1
 800283e:	4649      	mov	r1, r9
 8002840:	eb43 0501 	adc.w	r5, r3, r1
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	00eb      	lsls	r3, r5, #3
 800284e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002852:	00e2      	lsls	r2, r4, #3
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	4643      	mov	r3, r8
 800285a:	18e3      	adds	r3, r4, r3
 800285c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002860:	464b      	mov	r3, r9
 8002862:	eb45 0303 	adc.w	r3, r5, r3
 8002866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002876:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002886:	4629      	mov	r1, r5
 8002888:	008b      	lsls	r3, r1, #2
 800288a:	4621      	mov	r1, r4
 800288c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002890:	4621      	mov	r1, r4
 8002892:	008a      	lsls	r2, r1, #2
 8002894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002898:	f7fd fcf2 	bl	8000280 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <UART_SetConfig+0x4e4>)
 80028a2:	fba3 2302 	umull	r2, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	011c      	lsls	r4, r3, #4
 80028aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028bc:	4642      	mov	r2, r8
 80028be:	464b      	mov	r3, r9
 80028c0:	1891      	adds	r1, r2, r2
 80028c2:	61b9      	str	r1, [r7, #24]
 80028c4:	415b      	adcs	r3, r3
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028cc:	4641      	mov	r1, r8
 80028ce:	1851      	adds	r1, r2, r1
 80028d0:	6139      	str	r1, [r7, #16]
 80028d2:	4649      	mov	r1, r9
 80028d4:	414b      	adcs	r3, r1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e4:	4659      	mov	r1, fp
 80028e6:	00cb      	lsls	r3, r1, #3
 80028e8:	4651      	mov	r1, sl
 80028ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ee:	4651      	mov	r1, sl
 80028f0:	00ca      	lsls	r2, r1, #3
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	4642      	mov	r2, r8
 80028fa:	189b      	adds	r3, r3, r2
 80028fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002900:	464b      	mov	r3, r9
 8002902:	460a      	mov	r2, r1
 8002904:	eb42 0303 	adc.w	r3, r2, r3
 8002908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	67bb      	str	r3, [r7, #120]	; 0x78
 8002916:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002924:	4649      	mov	r1, r9
 8002926:	008b      	lsls	r3, r1, #2
 8002928:	4641      	mov	r1, r8
 800292a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800292e:	4641      	mov	r1, r8
 8002930:	008a      	lsls	r2, r1, #2
 8002932:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002936:	f7fd fca3 	bl	8000280 <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <UART_SetConfig+0x4e4>)
 8002940:	fba3 1302 	umull	r1, r3, r3, r2
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	2164      	movs	r1, #100	; 0x64
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	3332      	adds	r3, #50	; 0x32
 8002952:	4a34      	ldr	r2, [pc, #208]	; (8002a24 <UART_SetConfig+0x4e4>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800295e:	441c      	add	r4, r3
 8002960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002964:	2200      	movs	r2, #0
 8002966:	673b      	str	r3, [r7, #112]	; 0x70
 8002968:	677a      	str	r2, [r7, #116]	; 0x74
 800296a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800296e:	4642      	mov	r2, r8
 8002970:	464b      	mov	r3, r9
 8002972:	1891      	adds	r1, r2, r2
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	415b      	adcs	r3, r3
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800297e:	4641      	mov	r1, r8
 8002980:	1851      	adds	r1, r2, r1
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	4649      	mov	r1, r9
 8002986:	414b      	adcs	r3, r1
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002996:	4659      	mov	r1, fp
 8002998:	00cb      	lsls	r3, r1, #3
 800299a:	4651      	mov	r1, sl
 800299c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029a0:	4651      	mov	r1, sl
 80029a2:	00ca      	lsls	r2, r1, #3
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	4603      	mov	r3, r0
 80029aa:	4642      	mov	r2, r8
 80029ac:	189b      	adds	r3, r3, r2
 80029ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80029b0:	464b      	mov	r3, r9
 80029b2:	460a      	mov	r2, r1
 80029b4:	eb42 0303 	adc.w	r3, r2, r3
 80029b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	663b      	str	r3, [r7, #96]	; 0x60
 80029c4:	667a      	str	r2, [r7, #100]	; 0x64
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029d2:	4649      	mov	r1, r9
 80029d4:	008b      	lsls	r3, r1, #2
 80029d6:	4641      	mov	r1, r8
 80029d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029dc:	4641      	mov	r1, r8
 80029de:	008a      	lsls	r2, r1, #2
 80029e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029e4:	f7fd fc4c 	bl	8000280 <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <UART_SetConfig+0x4e4>)
 80029ee:	fba3 1302 	umull	r1, r3, r3, r2
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2164      	movs	r1, #100	; 0x64
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	3332      	adds	r3, #50	; 0x32
 8002a00:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <UART_SetConfig+0x4e4>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4422      	add	r2, r4
 8002a14:	609a      	str	r2, [r3, #8]
}
 8002a16:	bf00      	nop
 8002a18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a22:	bf00      	nop
 8002a24:	51eb851f 	.word	0x51eb851f

08002a28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f103 0208 	add.w	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f103 0208 	add.w	r2, r3, #8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f103 0208 	add.w	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae0:	d103      	bne.n	8002aea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e00c      	b.n	8002b04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3308      	adds	r3, #8
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e002      	b.n	8002af8 <vListInsert+0x2e>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d2f6      	bcs.n	8002af2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	601a      	str	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6852      	ldr	r2, [r2, #4]
 8002b5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d103      	bne.n	8002b70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1e5a      	subs	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bba:	f002 f87b 	bl	8004cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	441a      	add	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	3b01      	subs	r3, #1
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	441a      	add	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	22ff      	movs	r2, #255	; 0xff
 8002bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	22ff      	movs	r2, #255	; 0xff
 8002c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d114      	bne.n	8002c3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01a      	beq.n	8002c4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3310      	adds	r3, #16
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 f841 	bl	8003ca4 <xTaskRemoveFromEventList>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d012      	beq.n	8002c4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <xQueueGenericReset+0xcc>)
 8002c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	e009      	b.n	8002c4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fef2 	bl	8002a28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3324      	adds	r3, #36	; 0x24
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff feed 	bl	8002a28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c4e:	f002 f861 	bl	8004d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	613b      	str	r3, [r7, #16]
}
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	e004      	b.n	8002ca0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	3350      	adds	r3, #80	; 0x50
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 f927 	bl	8004ef8 <pvPortMalloc>
 8002caa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3350      	adds	r3, #80	; 0x50
 8002cba:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cbc:	79fa      	ldrb	r2, [r7, #7]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f805 	bl	8002cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cce:	69bb      	ldr	r3, [r7, #24]
	}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e002      	b.n	8002cfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d06:	2101      	movs	r1, #1
 8002d08:	69b8      	ldr	r0, [r7, #24]
 8002d0a:	f7ff ff41 	bl	8002b90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <xQueueGenericSend+0x32>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <xQueueGenericSend+0x40>
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <xQueueGenericSend+0x44>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <xQueueGenericSend+0x46>
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <xQueueGenericSend+0x60>
	__asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSend+0x6e>
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <xQueueGenericSend+0x72>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xQueueGenericSend+0x74>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xQueueGenericSend+0x8e>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	623b      	str	r3, [r7, #32]
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dae:	f001 f915 	bl	8003fdc <xTaskGetSchedulerState>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <xQueueGenericSend+0x9e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <xQueueGenericSend+0xa2>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <xQueueGenericSend+0xa4>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <xQueueGenericSend+0xbe>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61fb      	str	r3, [r7, #28]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dde:	f001 ff69 	bl	8004cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <xQueueGenericSend+0xd4>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d129      	bne.n	8002e48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dfa:	f000 fa07 	bl	800320c <prvCopyDataToQueue>
 8002dfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	3324      	adds	r3, #36	; 0x24
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 ff49 	bl	8003ca4 <xTaskRemoveFromEventList>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e18:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <xQueueGenericSend+0x1f8>)
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	e00a      	b.n	8002e40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e30:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <xQueueGenericSend+0x1f8>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e40:	f001 ff68 	bl	8004d14 <vPortExitCritical>
				return pdPASS;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e063      	b.n	8002f10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4e:	f001 ff61 	bl	8004d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e05c      	b.n	8002f10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 ff81 	bl	8003d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e6a:	f001 ff53 	bl	8004d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6e:	f000 fcfb 	bl	8003868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e72:	f001 ff1f 	bl	8004cb4 <vPortEnterCritical>
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e82:	d103      	bne.n	8002e8c <xQueueGenericSend+0x16c>
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e98:	d103      	bne.n	8002ea2 <xQueueGenericSend+0x182>
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea2:	f001 ff37 	bl	8004d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea6:	1d3a      	adds	r2, r7, #4
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 ff70 	bl	8003d94 <xTaskCheckForTimeOut>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d124      	bne.n	8002f04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ebc:	f000 fa9e 	bl	80033fc <prvIsQueueFull>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d018      	beq.n	8002ef8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	3310      	adds	r3, #16
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fe98 	bl	8003c04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed6:	f000 fa29 	bl	800332c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eda:	f000 fcd3 	bl	8003884 <xTaskResumeAll>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f47f af7c 	bne.w	8002dde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <xQueueGenericSend+0x1f8>)
 8002ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	e772      	b.n	8002dde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efa:	f000 fa17 	bl	800332c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efe:	f000 fcc1 	bl	8003884 <xTaskResumeAll>
 8002f02:	e76c      	b.n	8002dde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f06:	f000 fa11 	bl	800332c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f0a:	f000 fcbb 	bl	8003884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3738      	adds	r7, #56	; 0x38
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	; 0x38
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d103      	bne.n	8002f58 <xQueueGenericSendFromISR+0x3c>
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <xQueueGenericSendFromISR+0x40>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <xQueueGenericSendFromISR+0x42>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	623b      	str	r3, [r7, #32]
}
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d103      	bne.n	8002f86 <xQueueGenericSendFromISR+0x6a>
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <xQueueGenericSendFromISR+0x6e>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <xQueueGenericSendFromISR+0x70>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	61fb      	str	r3, [r7, #28]
}
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fa6:	f001 ff67 	bl	8004e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002faa:	f3ef 8211 	mrs	r2, BASEPRI
 8002fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	61ba      	str	r2, [r7, #24]
 8002fc0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <xQueueGenericSendFromISR+0xbc>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d12c      	bne.n	8003032 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe8:	f000 f910 	bl	800320c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff4:	d112      	bne.n	800301c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	3324      	adds	r3, #36	; 0x24
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fe4e 	bl	8003ca4 <xTaskRemoveFromEventList>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00b      	beq.n	800302c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e007      	b.n	800302c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800301c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003020:	3301      	adds	r3, #1
 8003022:	b2db      	uxtb	r3, r3
 8003024:	b25a      	sxtb	r2, r3
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800302c:	2301      	movs	r3, #1
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003030:	e001      	b.n	8003036 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003032:	2300      	movs	r3, #0
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003040:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003044:	4618      	mov	r0, r3
 8003046:	3738      	adds	r7, #56	; 0x38
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <xQueueReceive+0x30>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	623b      	str	r3, [r7, #32]
}
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <xQueueReceive+0x3e>
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <xQueueReceive+0x42>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueReceive+0x44>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueReceive+0x5e>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	61fb      	str	r3, [r7, #28]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030aa:	f000 ff97 	bl	8003fdc <xTaskGetSchedulerState>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <xQueueReceive+0x6e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <xQueueReceive+0x72>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueReceive+0x74>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <xQueueReceive+0x8e>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	61bb      	str	r3, [r7, #24]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030da:	f001 fdeb 	bl	8004cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01f      	beq.n	800312a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ee:	f000 f8f7 	bl	80032e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00f      	beq.n	8003122 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	3310      	adds	r3, #16
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fdcc 	bl	8003ca4 <xTaskRemoveFromEventList>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <xQueueReceive+0x1bc>)
 8003114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003122:	f001 fdf7 	bl	8004d14 <vPortExitCritical>
				return pdPASS;
 8003126:	2301      	movs	r3, #1
 8003128:	e069      	b.n	80031fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003130:	f001 fdf0 	bl	8004d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003134:	2300      	movs	r3, #0
 8003136:	e062      	b.n	80031fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fe10 	bl	8003d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800314c:	f001 fde2 	bl	8004d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003150:	f000 fb8a 	bl	8003868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003154:	f001 fdae 	bl	8004cb4 <vPortEnterCritical>
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800315e:	b25b      	sxtb	r3, r3
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003164:	d103      	bne.n	800316e <xQueueReceive+0x122>
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003174:	b25b      	sxtb	r3, r3
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317a:	d103      	bne.n	8003184 <xQueueReceive+0x138>
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003184:	f001 fdc6 	bl	8004d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003188:	1d3a      	adds	r2, r7, #4
 800318a:	f107 0310 	add.w	r3, r7, #16
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fdff 	bl	8003d94 <xTaskCheckForTimeOut>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d123      	bne.n	80031e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800319c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319e:	f000 f917 	bl	80033d0 <prvIsQueueEmpty>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d017      	beq.n	80031d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	3324      	adds	r3, #36	; 0x24
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fd27 	bl	8003c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b8:	f000 f8b8 	bl	800332c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031bc:	f000 fb62 	bl	8003884 <xTaskResumeAll>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d189      	bne.n	80030da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <xQueueReceive+0x1bc>)
 80031c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	e780      	b.n	80030da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031da:	f000 f8a7 	bl	800332c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031de:	f000 fb51 	bl	8003884 <xTaskResumeAll>
 80031e2:	e77a      	b.n	80030da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e6:	f000 f8a1 	bl	800332c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ea:	f000 fb4b 	bl	8003884 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f0:	f000 f8ee 	bl	80033d0 <prvIsQueueEmpty>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f43f af6f 	beq.w	80030da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3730      	adds	r7, #48	; 0x30
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10d      	bne.n	8003246 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d14d      	bne.n	80032ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 feee 	bl	8004018 <xTaskPriorityDisinherit>
 800323c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	e043      	b.n	80032ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d119      	bne.n	8003280 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6858      	ldr	r0, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	461a      	mov	r2, r3
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	f002 f852 	bl	8005300 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	441a      	add	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	d32b      	bcc.n	80032ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	e026      	b.n	80032ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68d8      	ldr	r0, [r3, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	461a      	mov	r2, r3
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	f002 f838 	bl	8005300 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	425b      	negs	r3, r3
 800329a:	441a      	add	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d207      	bcs.n	80032bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	425b      	negs	r3, r3
 80032b6:	441a      	add	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d105      	bne.n	80032ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032d6:	697b      	ldr	r3, [r7, #20]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d018      	beq.n	8003324 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	441a      	add	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	d303      	bcc.n	8003314 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68d9      	ldr	r1, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	461a      	mov	r2, r3
 800331e:	6838      	ldr	r0, [r7, #0]
 8003320:	f001 ffee 	bl	8005300 <memcpy>
	}
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003334:	f001 fcbe 	bl	8004cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800333e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003340:	e011      	b.n	8003366 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d012      	beq.n	8003370 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3324      	adds	r3, #36	; 0x24
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fca8 	bl	8003ca4 <xTaskRemoveFromEventList>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800335a:	f000 fd7d 	bl	8003e58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	3b01      	subs	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	dce9      	bgt.n	8003342 <prvUnlockQueue+0x16>
 800336e:	e000      	b.n	8003372 <prvUnlockQueue+0x46>
					break;
 8003370:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800337a:	f001 fccb 	bl	8004d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800337e:	f001 fc99 	bl	8004cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003388:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800338a:	e011      	b.n	80033b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d012      	beq.n	80033ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3310      	adds	r3, #16
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fc83 	bl	8003ca4 <xTaskRemoveFromEventList>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033a4:	f000 fd58 	bl	8003e58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033a8:	7bbb      	ldrb	r3, [r7, #14]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	dce9      	bgt.n	800338c <prvUnlockQueue+0x60>
 80033b8:	e000      	b.n	80033bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	22ff      	movs	r2, #255	; 0xff
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033c4:	f001 fca6 	bl	8004d14 <vPortExitCritical>
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033d8:	f001 fc6c 	bl	8004cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e001      	b.n	80033ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ee:	f001 fc91 	bl	8004d14 <vPortExitCritical>

	return xReturn;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003404:	f001 fc56 	bl	8004cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	429a      	cmp	r2, r3
 8003412:	d102      	bne.n	800341a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e001      	b.n	800341e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800341e:	f001 fc79 	bl	8004d14 <vPortExitCritical>

	return xReturn;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e014      	b.n	8003466 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <vQueueAddToRegistry+0x50>)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003448:	490c      	ldr	r1, [pc, #48]	; (800347c <vQueueAddToRegistry+0x50>)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <vQueueAddToRegistry+0x50>)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800345e:	e006      	b.n	800346e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b07      	cmp	r3, #7
 800346a:	d9e7      	bls.n	800343c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000124 	.word	0x20000124

08003480 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003490:	f001 fc10 	bl	8004cb4 <vPortEnterCritical>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800349a:	b25b      	sxtb	r3, r3
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a0:	d103      	bne.n	80034aa <vQueueWaitForMessageRestricted+0x2a>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b6:	d103      	bne.n	80034c0 <vQueueWaitForMessageRestricted+0x40>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c0:	f001 fc28 	bl	8004d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d106      	bne.n	80034da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fbb9 	bl	8003c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034da:	6978      	ldr	r0, [r7, #20]
 80034dc:	f7ff ff26 	bl	800332c <prvUnlockQueue>
	}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	; 0x30
 80034ec:	af04      	add	r7, sp, #16
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fcfb 	bl	8004ef8 <pvPortMalloc>
 8003502:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00e      	beq.n	8003528 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800350a:	2058      	movs	r0, #88	; 0x58
 800350c:	f001 fcf4 	bl	8004ef8 <pvPortMalloc>
 8003510:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
 800351e:	e005      	b.n	800352c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f001 fdad 	bl	8005080 <vPortFree>
 8003526:	e001      	b.n	800352c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d013      	beq.n	800355a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	2300      	movs	r3, #0
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	9302      	str	r3, [sp, #8]
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f80e 	bl	800356a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800354e:	69f8      	ldr	r0, [r7, #28]
 8003550:	f000 f89a 	bl	8003688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003554:	2301      	movs	r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e002      	b.n	8003560 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800355e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003560:	69bb      	ldr	r3, [r7, #24]
	}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b088      	sub	sp, #32
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	461a      	mov	r2, r3
 8003582:	21a5      	movs	r1, #165	; 0xa5
 8003584:	f001 feca 	bl	800531c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003592:	3b01      	subs	r3, #1
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f023 0307 	bic.w	r3, r3, #7
 80035a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	617b      	str	r3, [r7, #20]
}
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01f      	beq.n	8003608 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	e012      	b.n	80035f4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	7819      	ldrb	r1, [r3, #0]
 80035d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	3334      	adds	r3, #52	; 0x34
 80035de:	460a      	mov	r2, r1
 80035e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d006      	beq.n	80035fc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b09      	cmp	r3, #9
 80035f8:	d9e9      	bls.n	80035ce <prvInitialiseNewTask+0x64>
 80035fa:	e000      	b.n	80035fe <prvInitialiseNewTask+0x94>
			{
				break;
 80035fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003606:	e003      	b.n	8003610 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	2b0e      	cmp	r3, #14
 8003614:	d901      	bls.n	800361a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003616:	230e      	movs	r3, #14
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003624:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	2200      	movs	r2, #0
 800362a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fa19 	bl	8002a68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	3318      	adds	r3, #24
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fa14 	bl	8002a68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003644:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	f1c3 020f 	rsb	r2, r3, #15
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003654:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	2200      	movs	r2, #0
 800365a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	68f9      	ldr	r1, [r7, #12]
 8003668:	69b8      	ldr	r0, [r7, #24]
 800366a:	f001 f9e7 	bl	8004a3c <pxPortInitialiseStack>
 800366e:	4602      	mov	r2, r0
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003680:	bf00      	nop
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003690:	f001 fb10 	bl	8004cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003694:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <prvAddNewTaskToReadyList+0xc0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3301      	adds	r3, #1
 800369a:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <prvAddNewTaskToReadyList+0xc0>)
 800369c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <prvAddNewTaskToReadyList+0xc4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036a6:	4a29      	ldr	r2, [pc, #164]	; (800374c <prvAddNewTaskToReadyList+0xc4>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036ac:	4b26      	ldr	r3, [pc, #152]	; (8003748 <prvAddNewTaskToReadyList+0xc0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d110      	bne.n	80036d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036b4:	f000 fbf4 	bl	8003ea0 <prvInitialiseTaskLists>
 80036b8:	e00d      	b.n	80036d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036ba:	4b25      	ldr	r3, [pc, #148]	; (8003750 <prvAddNewTaskToReadyList+0xc8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <prvAddNewTaskToReadyList+0xc4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d802      	bhi.n	80036d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036d0:	4a1e      	ldr	r2, [pc, #120]	; (800374c <prvAddNewTaskToReadyList+0xc4>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <prvAddNewTaskToReadyList+0xcc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <prvAddNewTaskToReadyList+0xcc>)
 80036de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <prvAddNewTaskToReadyList+0xcc>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2201      	movs	r2, #1
 80036ee:	409a      	lsls	r2, r3
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <prvAddNewTaskToReadyList+0xd0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <prvAddNewTaskToReadyList+0xd0>)
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4a15      	ldr	r2, [pc, #84]	; (800375c <prvAddNewTaskToReadyList+0xd4>)
 8003708:	441a      	add	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f7ff f9b6 	bl	8002a82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003716:	f001 fafd 	bl	8004d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <prvAddNewTaskToReadyList+0xc8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00e      	beq.n	8003740 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <prvAddNewTaskToReadyList+0xc4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <prvAddNewTaskToReadyList+0xd8>)
 8003732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000304 	.word	0x20000304
 800374c:	20000164 	.word	0x20000164
 8003750:	20000310 	.word	0x20000310
 8003754:	20000320 	.word	0x20000320
 8003758:	2000030c 	.word	0x2000030c
 800375c:	20000168 	.word	0x20000168
 8003760:	e000ed04 	.word	0xe000ed04

08003764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d017      	beq.n	80037a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <vTaskDelay+0x60>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <vTaskDelay+0x30>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	60bb      	str	r3, [r7, #8]
}
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003794:	f000 f868 	bl	8003868 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003798:	2100      	movs	r1, #0
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fcc2 	bl	8004124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037a0:	f000 f870 	bl	8003884 <xTaskResumeAll>
 80037a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d107      	bne.n	80037bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <vTaskDelay+0x64>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000032c 	.word	0x2000032c
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80037d2:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <vTaskStartScheduler+0x84>)
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2300      	movs	r3, #0
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	2282      	movs	r2, #130	; 0x82
 80037de:	491d      	ldr	r1, [pc, #116]	; (8003854 <vTaskStartScheduler+0x88>)
 80037e0:	481d      	ldr	r0, [pc, #116]	; (8003858 <vTaskStartScheduler+0x8c>)
 80037e2:	f7ff fe81 	bl	80034e8 <xTaskCreate>
 80037e6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d102      	bne.n	80037f4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80037ee:	f000 fe13 	bl	8004418 <xTimerCreateTimerTask>
 80037f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d116      	bne.n	8003828 <vTaskStartScheduler+0x5c>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60bb      	str	r3, [r7, #8]
}
 800380c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <vTaskStartScheduler+0x90>)
 8003810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003814:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <vTaskStartScheduler+0x94>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <vTaskStartScheduler+0x98>)
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003822:	f001 f995 	bl	8004b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003826:	e00e      	b.n	8003846 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800382e:	d10a      	bne.n	8003846 <vTaskStartScheduler+0x7a>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	607b      	str	r3, [r7, #4]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <vTaskStartScheduler+0x78>
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000328 	.word	0x20000328
 8003854:	08005c3c 	.word	0x08005c3c
 8003858:	08003e71 	.word	0x08003e71
 800385c:	20000324 	.word	0x20000324
 8003860:	20000310 	.word	0x20000310
 8003864:	20000308 	.word	0x20000308

08003868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <vTaskSuspendAll+0x18>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	4a03      	ldr	r2, [pc, #12]	; (8003880 <vTaskSuspendAll+0x18>)
 8003874:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003876:	bf00      	nop
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	2000032c 	.word	0x2000032c

08003884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003892:	4b41      	ldr	r3, [pc, #260]	; (8003998 <xTaskResumeAll+0x114>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	603b      	str	r3, [r7, #0]
}
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038b0:	f001 fa00 	bl	8004cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038b4:	4b38      	ldr	r3, [pc, #224]	; (8003998 <xTaskResumeAll+0x114>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	4a37      	ldr	r2, [pc, #220]	; (8003998 <xTaskResumeAll+0x114>)
 80038bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038be:	4b36      	ldr	r3, [pc, #216]	; (8003998 <xTaskResumeAll+0x114>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d161      	bne.n	800398a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038c6:	4b35      	ldr	r3, [pc, #212]	; (800399c <xTaskResumeAll+0x118>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d05d      	beq.n	800398a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ce:	e02e      	b.n	800392e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d0:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <xTaskResumeAll+0x11c>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3318      	adds	r3, #24
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff f92d 	bl	8002b3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f928 	bl	8002b3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	2201      	movs	r2, #1
 80038f2:	409a      	lsls	r2, r3
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <xTaskResumeAll+0x120>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <xTaskResumeAll+0x120>)
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <xTaskResumeAll+0x124>)
 800390c:	441a      	add	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3304      	adds	r3, #4
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f7ff f8b4 	bl	8002a82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <xTaskResumeAll+0x128>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	429a      	cmp	r2, r3
 8003926:	d302      	bcc.n	800392e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003928:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <xTaskResumeAll+0x12c>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800392e:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <xTaskResumeAll+0x11c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1cc      	bne.n	80038d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800393c:	f000 fb2e 	bl	8003f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003940:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <xTaskResumeAll+0x130>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d010      	beq.n	800396e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800394c:	f000 f846 	bl	80039dc <xTaskIncrementTick>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <xTaskResumeAll+0x12c>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f1      	bne.n	800394c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003968:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <xTaskResumeAll+0x130>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <xTaskResumeAll+0x12c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003976:	2301      	movs	r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800397a:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <xTaskResumeAll+0x134>)
 800397c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800398a:	f001 f9c3 	bl	8004d14 <vPortExitCritical>

	return xAlreadyYielded;
 800398e:	68bb      	ldr	r3, [r7, #8]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	2000032c 	.word	0x2000032c
 800399c:	20000304 	.word	0x20000304
 80039a0:	200002c4 	.word	0x200002c4
 80039a4:	2000030c 	.word	0x2000030c
 80039a8:	20000168 	.word	0x20000168
 80039ac:	20000164 	.word	0x20000164
 80039b0:	20000318 	.word	0x20000318
 80039b4:	20000314 	.word	0x20000314
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <xTaskGetTickCount+0x1c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039c8:	687b      	ldr	r3, [r7, #4]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000308 	.word	0x20000308

080039dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e6:	4b4e      	ldr	r3, [pc, #312]	; (8003b20 <xTaskIncrementTick+0x144>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 8088 	bne.w	8003b00 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039f0:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <xTaskIncrementTick+0x148>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039f8:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <xTaskIncrementTick+0x148>)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d120      	bne.n	8003a46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a04:	4b48      	ldr	r3, [pc, #288]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	603b      	str	r3, [r7, #0]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <xTaskIncrementTick+0x46>
 8003a24:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b40      	ldr	r3, [pc, #256]	; (8003b2c <xTaskIncrementTick+0x150>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a3e      	ldr	r2, [pc, #248]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4a3e      	ldr	r2, [pc, #248]	; (8003b2c <xTaskIncrementTick+0x150>)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b3d      	ldr	r3, [pc, #244]	; (8003b30 <xTaskIncrementTick+0x154>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <xTaskIncrementTick+0x154>)
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	f000 faab 	bl	8003f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <xTaskIncrementTick+0x158>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d348      	bcc.n	8003ae2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <xTaskIncrementTick+0x158>)
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a60:	601a      	str	r2, [r3, #0]
					break;
 8003a62:	e03e      	b.n	8003ae2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a64:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <xTaskIncrementTick+0x14c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d203      	bcs.n	8003a84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a7c:	4a2d      	ldr	r2, [pc, #180]	; (8003b34 <xTaskIncrementTick+0x158>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a82:	e02e      	b.n	8003ae2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff f857 	bl	8002b3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3318      	adds	r3, #24
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff f84e 	bl	8002b3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <xTaskIncrementTick+0x15c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <xTaskIncrementTick+0x15c>)
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <xTaskIncrementTick+0x160>)
 8003ac0:	441a      	add	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe ffda 	bl	8002a82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <xTaskIncrementTick+0x164>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3b9      	bcc.n	8003a50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae0:	e7b6      	b.n	8003a50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <xTaskIncrementTick+0x164>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	4914      	ldr	r1, [pc, #80]	; (8003b3c <xTaskIncrementTick+0x160>)
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d907      	bls.n	8003b0a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e004      	b.n	8003b0a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b00:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <xTaskIncrementTick+0x168>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	4a0f      	ldr	r2, [pc, #60]	; (8003b44 <xTaskIncrementTick+0x168>)
 8003b08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <xTaskIncrementTick+0x16c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b16:	697b      	ldr	r3, [r7, #20]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	2000032c 	.word	0x2000032c
 8003b24:	20000308 	.word	0x20000308
 8003b28:	200002bc 	.word	0x200002bc
 8003b2c:	200002c0 	.word	0x200002c0
 8003b30:	2000031c 	.word	0x2000031c
 8003b34:	20000324 	.word	0x20000324
 8003b38:	2000030c 	.word	0x2000030c
 8003b3c:	20000168 	.word	0x20000168
 8003b40:	20000164 	.word	0x20000164
 8003b44:	20000314 	.word	0x20000314
 8003b48:	20000318 	.word	0x20000318

08003b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b52:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <vTaskSwitchContext+0xa4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <vTaskSwitchContext+0xa8>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b60:	e03f      	b.n	8003be2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <vTaskSwitchContext+0xa8>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <vTaskSwitchContext+0xac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	f1c3 031f 	rsb	r3, r3, #31
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	491f      	ldr	r1, [pc, #124]	; (8003bfc <vTaskSwitchContext+0xb0>)
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	607b      	str	r3, [r7, #4]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <vTaskSwitchContext+0x5a>
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <vTaskSwitchContext+0xb0>)
 8003bb4:	4413      	add	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d104      	bne.n	8003bd8 <vTaskSwitchContext+0x8c>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <vTaskSwitchContext+0xb4>)
 8003be0:	6013      	str	r3, [r2, #0]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	2000032c 	.word	0x2000032c
 8003bf4:	20000318 	.word	0x20000318
 8003bf8:	2000030c 	.word	0x2000030c
 8003bfc:	20000168 	.word	0x20000168
 8003c00:	20000164 	.word	0x20000164

08003c04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60fb      	str	r3, [r7, #12]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <vTaskPlaceOnEventList+0x44>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3318      	adds	r3, #24
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fe ff49 	bl	8002aca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c38:	2101      	movs	r1, #1
 8003c3a:	6838      	ldr	r0, [r7, #0]
 8003c3c:	f000 fa72 	bl	8004124 <prvAddCurrentTaskToDelayedList>
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000164 	.word	0x20000164

08003c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	617b      	str	r3, [r7, #20]
}
 8003c70:	bf00      	nop
 8003c72:	e7fe      	b.n	8003c72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3318      	adds	r3, #24
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7fe ff00 	bl	8002a82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	68b8      	ldr	r0, [r7, #8]
 8003c92:	f000 fa47 	bl	8004124 <prvAddCurrentTaskToDelayedList>
	}
 8003c96:	bf00      	nop
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000164 	.word	0x20000164

08003ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60fb      	str	r3, [r7, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe ff31 	bl	8002b3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <xTaskRemoveFromEventList+0xac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d11c      	bne.n	8003d1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe ff28 	bl	8002b3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <xTaskRemoveFromEventList+0xb0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <xTaskRemoveFromEventList+0xb0>)
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <xTaskRemoveFromEventList+0xb4>)
 8003d0c:	441a      	add	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7fe feb4 	bl	8002a82 <vListInsertEnd>
 8003d1a:	e005      	b.n	8003d28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	3318      	adds	r3, #24
 8003d20:	4619      	mov	r1, r3
 8003d22:	480e      	ldr	r0, [pc, #56]	; (8003d5c <xTaskRemoveFromEventList+0xb8>)
 8003d24:	f7fe fead 	bl	8002a82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <xTaskRemoveFromEventList+0xbc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d905      	bls.n	8003d42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <xTaskRemoveFromEventList+0xc0>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e001      	b.n	8003d46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d46:	697b      	ldr	r3, [r7, #20]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	2000032c 	.word	0x2000032c
 8003d54:	2000030c 	.word	0x2000030c
 8003d58:	20000168 	.word	0x20000168
 8003d5c:	200002c4 	.word	0x200002c4
 8003d60:	20000164 	.word	0x20000164
 8003d64:	20000318 	.word	0x20000318

08003d68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <vTaskInternalSetTimeOutState+0x24>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <vTaskInternalSetTimeOutState+0x28>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	605a      	str	r2, [r3, #4]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	2000031c 	.word	0x2000031c
 8003d90:	20000308 	.word	0x20000308

08003d94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	613b      	str	r3, [r7, #16]
}
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	60fb      	str	r3, [r7, #12]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dd6:	f000 ff6d 	bl	8004cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dda:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <xTaskCheckForTimeOut+0xbc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003df2:	d102      	bne.n	8003dfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e023      	b.n	8003e42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <xTaskCheckForTimeOut+0xc0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d007      	beq.n	8003e16 <xTaskCheckForTimeOut+0x82>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d302      	bcc.n	8003e16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	e015      	b.n	8003e42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d20b      	bcs.n	8003e38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	1ad2      	subs	r2, r2, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff9b 	bl	8003d68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	e004      	b.n	8003e42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e42:	f000 ff67 	bl	8004d14 <vPortExitCritical>

	return xReturn;
 8003e46:	69fb      	ldr	r3, [r7, #28]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3720      	adds	r7, #32
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000308 	.word	0x20000308
 8003e54:	2000031c 	.word	0x2000031c

08003e58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <vTaskMissedYield+0x14>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	20000318 	.word	0x20000318

08003e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e78:	f000 f852 	bl	8003f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <prvIdleTask+0x28>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d9f9      	bls.n	8003e78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <prvIdleTask+0x2c>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e94:	e7f0      	b.n	8003e78 <prvIdleTask+0x8>
 8003e96:	bf00      	nop
 8003e98:	20000168 	.word	0x20000168
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	e00c      	b.n	8003ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <prvInitialiseTaskLists+0x60>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe fdb4 	bl	8002a28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b0e      	cmp	r3, #14
 8003eca:	d9ef      	bls.n	8003eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ecc:	480d      	ldr	r0, [pc, #52]	; (8003f04 <prvInitialiseTaskLists+0x64>)
 8003ece:	f7fe fdab 	bl	8002a28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ed2:	480d      	ldr	r0, [pc, #52]	; (8003f08 <prvInitialiseTaskLists+0x68>)
 8003ed4:	f7fe fda8 	bl	8002a28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ed8:	480c      	ldr	r0, [pc, #48]	; (8003f0c <prvInitialiseTaskLists+0x6c>)
 8003eda:	f7fe fda5 	bl	8002a28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ede:	480c      	ldr	r0, [pc, #48]	; (8003f10 <prvInitialiseTaskLists+0x70>)
 8003ee0:	f7fe fda2 	bl	8002a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ee4:	480b      	ldr	r0, [pc, #44]	; (8003f14 <prvInitialiseTaskLists+0x74>)
 8003ee6:	f7fe fd9f 	bl	8002a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <prvInitialiseTaskLists+0x78>)
 8003eec:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <prvInitialiseTaskLists+0x64>)
 8003eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <prvInitialiseTaskLists+0x7c>)
 8003ef2:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <prvInitialiseTaskLists+0x68>)
 8003ef4:	601a      	str	r2, [r3, #0]
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000168 	.word	0x20000168
 8003f04:	20000294 	.word	0x20000294
 8003f08:	200002a8 	.word	0x200002a8
 8003f0c:	200002c4 	.word	0x200002c4
 8003f10:	200002d8 	.word	0x200002d8
 8003f14:	200002f0 	.word	0x200002f0
 8003f18:	200002bc 	.word	0x200002bc
 8003f1c:	200002c0 	.word	0x200002c0

08003f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f26:	e019      	b.n	8003f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f28:	f000 fec4 	bl	8004cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <prvCheckTasksWaitingTermination+0x50>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe fdff 	bl	8002b3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <prvCheckTasksWaitingTermination+0x54>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <prvCheckTasksWaitingTermination+0x54>)
 8003f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <prvCheckTasksWaitingTermination+0x58>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <prvCheckTasksWaitingTermination+0x58>)
 8003f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f52:	f000 fedf 	bl	8004d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f810 	bl	8003f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <prvCheckTasksWaitingTermination+0x58>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e1      	bne.n	8003f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200002d8 	.word	0x200002d8
 8003f74:	20000304 	.word	0x20000304
 8003f78:	200002ec 	.word	0x200002ec

08003f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 f879 	bl	8005080 <vPortFree>
			vPortFree( pxTCB );
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f001 f876 	bl	8005080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <prvResetNextTaskUnblockTime+0x38>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fb4:	e008      	b.n	8003fc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <prvResetNextTaskUnblockTime+0x38>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fc6:	6013      	str	r3, [r2, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	200002bc 	.word	0x200002bc
 8003fd8:	20000324 	.word	0x20000324

08003fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <xTaskGetSchedulerState+0x34>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fea:	2301      	movs	r3, #1
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	e008      	b.n	8004002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <xTaskGetSchedulerState+0x38>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	e001      	b.n	8004002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ffe:	2300      	movs	r3, #0
 8004000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004002:	687b      	ldr	r3, [r7, #4]
	}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	20000310 	.word	0x20000310
 8004014:	2000032c 	.word	0x2000032c

08004018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d06e      	beq.n	800410c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800402e:	4b3a      	ldr	r3, [pc, #232]	; (8004118 <xTaskPriorityDisinherit+0x100>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d00a      	beq.n	800404e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	60fb      	str	r3, [r7, #12]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	60bb      	str	r3, [r7, #8]
}
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004070:	1e5a      	subs	r2, r3, #1
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407e:	429a      	cmp	r2, r3
 8004080:	d044      	beq.n	800410c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d140      	bne.n	800410c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3304      	adds	r3, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fd54 	bl	8002b3c <uxListRemove>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d115      	bne.n	80040c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	491f      	ldr	r1, [pc, #124]	; (800411c <xTaskPriorityDisinherit+0x104>)
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xTaskPriorityDisinherit+0xae>
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	2201      	movs	r2, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	4b18      	ldr	r3, [pc, #96]	; (8004120 <xTaskPriorityDisinherit+0x108>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4013      	ands	r3, r2
 80040c2:	4a17      	ldr	r2, [pc, #92]	; (8004120 <xTaskPriorityDisinherit+0x108>)
 80040c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	f1c3 020f 	rsb	r2, r3, #15
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	2201      	movs	r2, #1
 80040e0:	409a      	lsls	r2, r3
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <xTaskPriorityDisinherit+0x108>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	4a0d      	ldr	r2, [pc, #52]	; (8004120 <xTaskPriorityDisinherit+0x108>)
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4a08      	ldr	r2, [pc, #32]	; (800411c <xTaskPriorityDisinherit+0x104>)
 80040fa:	441a      	add	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f7fe fcbd 	bl	8002a82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800410c:	697b      	ldr	r3, [r7, #20]
	}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000164 	.word	0x20000164
 800411c:	20000168 	.word	0x20000168
 8004120:	2000030c 	.word	0x2000030c

08004124 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800412e:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3304      	adds	r3, #4
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fcfe 	bl	8002b3c <uxListRemove>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	2201      	movs	r2, #1
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43da      	mvns	r2, r3
 8004154:	4b21      	ldr	r3, [pc, #132]	; (80041dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4013      	ands	r3, r2
 800415a:	4a20      	ldr	r2, [pc, #128]	; (80041dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800415c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004164:	d10a      	bne.n	800417c <prvAddCurrentTaskToDelayedList+0x58>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	4619      	mov	r1, r3
 8004174:	481a      	ldr	r0, [pc, #104]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004176:	f7fe fc84 	bl	8002a82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800417a:	e026      	b.n	80041ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004184:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d209      	bcs.n	80041a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7fe fc92 	bl	8002aca <vListInsert>
}
 80041a6:	e010      	b.n	80041ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f7fe fc88 	bl	8002aca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d202      	bcs.n	80041ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6013      	str	r3, [r2, #0]
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000308 	.word	0x20000308
 80041d8:	20000164 	.word	0x20000164
 80041dc:	2000030c 	.word	0x2000030c
 80041e0:	200002f0 	.word	0x200002f0
 80041e4:	200002c0 	.word	0x200002c0
 80041e8:	200002bc 	.word	0x200002bc
 80041ec:	20000324 	.word	0x20000324

080041f0 <print_pcb>:

void print_pcb(TCB_t *t, char *state){
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80041f6:	af04      	add	r7, sp, #16
 80041f8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80041fc:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8004200:	6018      	str	r0, [r3, #0]
 8004202:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004206:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800420a:	6019      	str	r1, [r3, #0]
	char Monitor_data[1000];
	memset(Monitor_data,'\0',sizeof(Monitor_data));
 800420c:	f107 0308 	add.w	r3, r7, #8
 8004210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f001 f880 	bl	800531c <memset>
	sprintf(Monitor_data,"%-15s %-2lu/%-14lu  0x%-9lx 0x%-14lx %s\n\r", t->pcTaskName, t->uxPriority, t->uxBasePriority, t->pxStack, t->pxTopOfStack, state);
 800421c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004220:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f103 0534 	add.w	r5, r3, #52	; 0x34
 800422a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800422e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8004236:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800423a:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004242:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8004246:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800424e:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8004252:	f5a1 717b 	sub.w	r1, r1, #1004	; 0x3ec
 8004256:	6809      	ldr	r1, [r1, #0]
 8004258:	6809      	ldr	r1, [r1, #0]
 800425a:	f107 0408 	add.w	r4, r7, #8
 800425e:	f507 707c 	add.w	r0, r7, #1008	; 0x3f0
 8004262:	f5a0 707c 	sub.w	r0, r0, #1008	; 0x3f0
 8004266:	6800      	ldr	r0, [r0, #0]
 8004268:	9003      	str	r0, [sp, #12]
 800426a:	9102      	str	r1, [sp, #8]
 800426c:	9201      	str	r2, [sp, #4]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4633      	mov	r3, r6
 8004272:	462a      	mov	r2, r5
 8004274:	490b      	ldr	r1, [pc, #44]	; (80042a4 <print_pcb+0xb4>)
 8004276:	4620      	mov	r0, r4
 8004278:	f001 f858 	bl	800532c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 800427c:	f107 0308 	add.w	r3, r7, #8
 8004280:	4618      	mov	r0, r3
 8004282:	f7fb ffa5 	bl	80001d0 <strlen>
 8004286:	4603      	mov	r3, r0
 8004288:	b29a      	uxth	r2, r3
 800428a:	f107 0108 	add.w	r1, r7, #8
 800428e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004292:	4805      	ldr	r0, [pc, #20]	; (80042a8 <print_pcb+0xb8>)
 8004294:	f7fe f853 	bl	800233e <HAL_UART_Transmit>
}
 8004298:	bf00      	nop
 800429a:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 800429e:	46bd      	mov	sp, r7
 80042a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a2:	bf00      	nop
 80042a4:	08005c44 	.word	0x08005c44
 80042a8:	20000090 	.word	0x20000090

080042ac <Taskmonitor>:

void Taskmonitor(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b0a6      	sub	sp, #152	; 0x98
 80042b0:	af00      	add	r7, sp, #0
	/* Initialize string */
	char Monitor_data[130];
	memset(Monitor_data,'\0',sizeof(Monitor_data));
 80042b2:	463b      	mov	r3, r7
 80042b4:	2282      	movs	r2, #130	; 0x82
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 f82f 	bl	800531c <memset>

	/* Stop scheduler */
	/* Taskmonitor() will block when UART is transmitting data */
	/* Scheduler will change list data when Taskmonitor() is blocked */
	vTaskSuspendAll();
 80042be:	f7ff fad3 	bl	8003868 <vTaskSuspendAll>

	/* Print title */
	sprintf(Monitor_data,"|Name      |Priority(Base/actual) |pxStack    |pxTopOfStack    |State    |\n\r");
 80042c2:	463b      	mov	r3, r7
 80042c4:	494c      	ldr	r1, [pc, #304]	; (80043f8 <Taskmonitor+0x14c>)
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 f830 	bl	800532c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 80042cc:	463b      	mov	r3, r7
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fb ff7e 	bl	80001d0 <strlen>
 80042d4:	4603      	mov	r3, r0
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	4639      	mov	r1, r7
 80042da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042de:	4847      	ldr	r0, [pc, #284]	; (80043fc <Taskmonitor+0x150>)
 80042e0:	f7fe f82d 	bl	800233e <HAL_UART_Transmit>

	ListItem_t *node;
	/* pxReadyTasksLists */
	for(int i=0;i<15;i++){ //因為priority 最高15 要走訪每個priority 的 readyqueue
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ea:	e033      	b.n	8004354 <Taskmonitor+0xa8>
		node = listGET_HEAD_ENTRY(pxReadyTasksLists + i);
 80042ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <Taskmonitor+0x154>)
 80042fc:	4413      	add	r3, r2
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxReadyTasksLists + i);j++){
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800430a:	e010      	b.n	800432e <Taskmonitor+0x82>
			print_pcb(listGET_LIST_ITEM_OWNER(node), "Ready");
 800430c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	493c      	ldr	r1, [pc, #240]	; (8004404 <Taskmonitor+0x158>)
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff6b 	bl	80041f0 <print_pcb>
			node = listGET_NEXT(node);
 800431a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxReadyTasksLists + i);j++){
 8004324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004328:	3301      	adds	r3, #1
 800432a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800432e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	461a      	mov	r2, r3
 800433c:	4b30      	ldr	r3, [pc, #192]	; (8004400 <Taskmonitor+0x154>)
 800433e:	4413      	add	r3, r2
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004346:	429a      	cmp	r2, r3
 8004348:	d3e0      	bcc.n	800430c <Taskmonitor+0x60>
	for(int i=0;i<15;i++){ //因為priority 最高15 要走訪每個priority 的 readyqueue
 800434a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800434e:	3301      	adds	r3, #1
 8004350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004358:	2b0e      	cmp	r3, #14
 800435a:	ddc7      	ble.n	80042ec <Taskmonitor+0x40>
		}
	}

	/* pxDelayedTaskList*/
	node = listGET_HEAD_ENTRY(pxDelayedTaskList);
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <Taskmonitor+0x15c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxDelayedTaskList);j++){
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800436c:	e010      	b.n	8004390 <Taskmonitor+0xe4>
		print_pcb(listGET_LIST_ITEM_OWNER(node), "Delayed");
 800436e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4925      	ldr	r1, [pc, #148]	; (800440c <Taskmonitor+0x160>)
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff ff3a 	bl	80041f0 <print_pcb>
		node = listGET_NEXT(node);
 800437c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxDelayedTaskList);j++){
 8004386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800438a:	3301      	adds	r3, #1
 800438c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <Taskmonitor+0x15c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800439a:	429a      	cmp	r2, r3
 800439c:	d3e7      	bcc.n	800436e <Taskmonitor+0xc2>
	}
	node = listGET_HEAD_ENTRY(pxDelayedTaskList);
 800439e:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <Taskmonitor+0x15c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	/* pxOverflowDelayedTaskList */
	node = listGET_HEAD_ENTRY(pxOverflowDelayedTaskList);
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <Taskmonitor+0x164>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList);j++){
 80043b2:	2300      	movs	r3, #0
 80043b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043b8:	e010      	b.n	80043dc <Taskmonitor+0x130>
		print_pcb(listGET_LIST_ITEM_OWNER(node), "Overflow");
 80043ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4914      	ldr	r1, [pc, #80]	; (8004414 <Taskmonitor+0x168>)
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff ff14 	bl	80041f0 <print_pcb>
		node = listGET_NEXT(node);
 80043c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	for(uint32_t j=0;j<listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList);j++){
 80043d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043d6:	3301      	adds	r3, #1
 80043d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <Taskmonitor+0x164>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d3e7      	bcc.n	80043ba <Taskmonitor+0x10e>
	}
	/*Resume scheduler */
	xTaskResumeAll();
 80043ea:	f7ff fa4b 	bl	8003884 <xTaskResumeAll>
}
 80043ee:	bf00      	nop
 80043f0:	3798      	adds	r7, #152	; 0x98
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	08005c70 	.word	0x08005c70
 80043fc:	20000090 	.word	0x20000090
 8004400:	20000168 	.word	0x20000168
 8004404:	08005cc0 	.word	0x08005cc0
 8004408:	200002bc 	.word	0x200002bc
 800440c:	08005cc8 	.word	0x08005cc8
 8004410:	200002c0 	.word	0x200002c0
 8004414:	08005cd0 	.word	0x08005cd0

08004418 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004422:	f000 fad5 	bl	80049d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004426:	4b11      	ldr	r3, [pc, #68]	; (800446c <xTimerCreateTimerTask+0x54>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00b      	beq.n	8004446 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <xTimerCreateTimerTask+0x58>)
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	2302      	movs	r3, #2
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800443c:	490d      	ldr	r1, [pc, #52]	; (8004474 <xTimerCreateTimerTask+0x5c>)
 800443e:	480e      	ldr	r0, [pc, #56]	; (8004478 <xTimerCreateTimerTask+0x60>)
 8004440:	f7ff f852 	bl	80034e8 <xTaskCreate>
 8004444:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	603b      	str	r3, [r7, #0]
}
 800445e:	bf00      	nop
 8004460:	e7fe      	b.n	8004460 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004462:	687b      	ldr	r3, [r7, #4]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000360 	.word	0x20000360
 8004470:	20000364 	.word	0x20000364
 8004474:	08005cdc 	.word	0x08005cdc
 8004478:	080045b1 	.word	0x080045b1

0800447c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800448a:	2300      	movs	r3, #0
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	623b      	str	r3, [r7, #32]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044aa:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <xTimerGenericCommand+0x98>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02a      	beq.n	8004508 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	dc18      	bgt.n	80044f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044c4:	f7ff fd8a 	bl	8003fdc <xTaskGetSchedulerState>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d109      	bne.n	80044e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <xTimerGenericCommand+0x98>)
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	f107 0114 	add.w	r1, r7, #20
 80044d6:	2300      	movs	r3, #0
 80044d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044da:	f7fe fc21 	bl	8002d20 <xQueueGenericSend>
 80044de:	6278      	str	r0, [r7, #36]	; 0x24
 80044e0:	e012      	b.n	8004508 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <xTimerGenericCommand+0x98>)
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	f107 0114 	add.w	r1, r7, #20
 80044ea:	2300      	movs	r3, #0
 80044ec:	2200      	movs	r2, #0
 80044ee:	f7fe fc17 	bl	8002d20 <xQueueGenericSend>
 80044f2:	6278      	str	r0, [r7, #36]	; 0x24
 80044f4:	e008      	b.n	8004508 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <xTimerGenericCommand+0x98>)
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f107 0114 	add.w	r1, r7, #20
 80044fe:	2300      	movs	r3, #0
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	f7fe fd0b 	bl	8002f1c <xQueueGenericSendFromISR>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800450a:	4618      	mov	r0, r3
 800450c:	3728      	adds	r7, #40	; 0x28
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000360 	.word	0x20000360

08004518 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af02      	add	r7, sp, #8
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004522:	4b22      	ldr	r3, [pc, #136]	; (80045ac <prvProcessExpiredTimer+0x94>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	3304      	adds	r3, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe fb03 	bl	8002b3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	18d1      	adds	r1, r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	6978      	ldr	r0, [r7, #20]
 8004552:	f000 f8d1 	bl	80046f8 <prvInsertTimerInActiveList>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01f      	beq.n	800459c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800455c:	2300      	movs	r3, #0
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2300      	movs	r3, #0
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	2100      	movs	r1, #0
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f7ff ff88 	bl	800447c <xTimerGenericCommand>
 800456c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d113      	bne.n	800459c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60fb      	str	r3, [r7, #12]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004590:	f023 0301 	bic.w	r3, r3, #1
 8004594:	b2da      	uxtb	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	6978      	ldr	r0, [r7, #20]
 80045a2:	4798      	blx	r3
}
 80045a4:	bf00      	nop
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000358 	.word	0x20000358

080045b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045b8:	f107 0308 	add.w	r3, r7, #8
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 f857 	bl	8004670 <prvGetNextExpireTime>
 80045c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4619      	mov	r1, r3
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f803 	bl	80045d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045ce:	f000 f8d5 	bl	800477c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045d2:	e7f1      	b.n	80045b8 <prvTimerTask+0x8>

080045d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045de:	f7ff f943 	bl	8003868 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045e2:	f107 0308 	add.w	r3, r7, #8
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f866 	bl	80046b8 <prvSampleTimeNow>
 80045ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d130      	bne.n	8004656 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <prvProcessTimerOrBlockTask+0x3c>
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d806      	bhi.n	8004610 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004602:	f7ff f93f 	bl	8003884 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ff85 	bl	8004518 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800460e:	e024      	b.n	800465a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <prvProcessTimerOrBlockTask+0x90>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <prvProcessTimerOrBlockTask+0x50>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <prvProcessTimerOrBlockTask+0x52>
 8004624:	2300      	movs	r3, #0
 8004626:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <prvProcessTimerOrBlockTask+0x94>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	f7fe ff23 	bl	8003480 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800463a:	f7ff f923 	bl	8003884 <xTaskResumeAll>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004644:	4b09      	ldr	r3, [pc, #36]	; (800466c <prvProcessTimerOrBlockTask+0x98>)
 8004646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	f3bf 8f6f 	isb	sy
}
 8004654:	e001      	b.n	800465a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004656:	f7ff f915 	bl	8003884 <xTaskResumeAll>
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	2000035c 	.word	0x2000035c
 8004668:	20000360 	.word	0x20000360
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004678:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <prvGetNextExpireTime+0x44>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <prvGetNextExpireTime+0x16>
 8004682:	2201      	movs	r2, #1
 8004684:	e000      	b.n	8004688 <prvGetNextExpireTime+0x18>
 8004686:	2200      	movs	r2, #0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <prvGetNextExpireTime+0x44>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e001      	b.n	80046a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046a4:	68fb      	ldr	r3, [r7, #12]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000358 	.word	0x20000358

080046b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046c0:	f7ff f97c 	bl	80039bc <xTaskGetTickCount>
 80046c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <prvSampleTimeNow+0x3c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d205      	bcs.n	80046dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046d0:	f000 f91a 	bl	8004908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e002      	b.n	80046e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046e2:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <prvSampleTimeNow+0x3c>)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046e8:	68fb      	ldr	r3, [r7, #12]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000368 	.word	0x20000368

080046f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	d812      	bhi.n	8004744 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	1ad2      	subs	r2, r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800472c:	2301      	movs	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e01b      	b.n	800476a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <prvInsertTimerInActiveList+0x7c>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f7fe f9c4 	bl	8002aca <vListInsert>
 8004742:	e012      	b.n	800476a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d206      	bcs.n	800475a <prvInsertTimerInActiveList+0x62>
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e007      	b.n	800476a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <prvInsertTimerInActiveList+0x80>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3304      	adds	r3, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4610      	mov	r0, r2
 8004766:	f7fe f9b0 	bl	8002aca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800476a:	697b      	ldr	r3, [r7, #20]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	2000035c 	.word	0x2000035c
 8004778:	20000358 	.word	0x20000358

0800477c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08c      	sub	sp, #48	; 0x30
 8004780:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004782:	e0ae      	b.n	80048e2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f2c0 80aa 	blt.w	80048e0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	3304      	adds	r3, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe f9cd 	bl	8002b3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff ff87 	bl	80046b8 <prvSampleTimeNow>
 80047aa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b09      	cmp	r3, #9
 80047b0:	f200 8097 	bhi.w	80048e2 <prvProcessReceivedCommands+0x166>
 80047b4:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <prvProcessReceivedCommands+0x40>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047e5 	.word	0x080047e5
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	080047e5 	.word	0x080047e5
 80047c8:	08004859 	.word	0x08004859
 80047cc:	0800486d 	.word	0x0800486d
 80047d0:	080048b7 	.word	0x080048b7
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	080047e5 	.word	0x080047e5
 80047dc:	08004859 	.word	0x08004859
 80047e0:	0800486d 	.word	0x0800486d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	18d1      	adds	r1, r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a3a      	ldr	r2, [r7, #32]
 8004802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004804:	f7ff ff78 	bl	80046f8 <prvInsertTimerInActiveList>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d069      	beq.n	80048e2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004814:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d05e      	beq.n	80048e2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	441a      	add	r2, r3
 800482c:	2300      	movs	r3, #0
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	2300      	movs	r3, #0
 8004832:	2100      	movs	r1, #0
 8004834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004836:	f7ff fe21 	bl	800447c <xTimerGenericCommand>
 800483a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d14f      	bne.n	80048e2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	61bb      	str	r3, [r7, #24]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	b2da      	uxtb	r2, r3
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800486a:	e03a      	b.n	80048e2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	b2da      	uxtb	r2, r3
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	617b      	str	r3, [r7, #20]
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	18d1      	adds	r1, r2, r3
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b0:	f7ff ff22 	bl	80046f8 <prvInsertTimerInActiveList>
					break;
 80048b4:	e015      	b.n	80048e2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d103      	bne.n	80048cc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80048c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048c6:	f000 fbdb 	bl	8005080 <vPortFree>
 80048ca:	e00a      	b.n	80048e2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048de:	e000      	b.n	80048e2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80048e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <prvProcessReceivedCommands+0x188>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f107 0108 	add.w	r1, r7, #8
 80048ea:	2200      	movs	r2, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fe fbad 	bl	800304c <xQueueReceive>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f af45 	bne.w	8004784 <prvProcessReceivedCommands+0x8>
	}
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	3728      	adds	r7, #40	; 0x28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000360 	.word	0x20000360

08004908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800490e:	e048      	b.n	80049a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800491a:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3304      	adds	r3, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe f907 	bl	8002b3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02e      	beq.n	80049a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d90e      	bls.n	8004974 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3304      	adds	r3, #4
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f7fe f8ac 	bl	8002aca <vListInsert>
 8004972:	e016      	b.n	80049a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004974:	2300      	movs	r3, #0
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2300      	movs	r3, #0
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	2100      	movs	r1, #0
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff fd7c 	bl	800447c <xTimerGenericCommand>
 8004984:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	603b      	str	r3, [r7, #0]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049a2:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1b1      	bne.n	8004910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <prvSwitchTimerLists+0xc4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <prvSwitchTimerLists+0xc0>)
 80049b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049ba:	4a04      	ldr	r2, [pc, #16]	; (80049cc <prvSwitchTimerLists+0xc4>)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	6013      	str	r3, [r2, #0]
}
 80049c0:	bf00      	nop
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000358 	.word	0x20000358
 80049cc:	2000035c 	.word	0x2000035c

080049d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049d4:	f000 f96e 	bl	8004cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049d8:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <prvCheckForValidListAndQueue+0x54>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d11d      	bne.n	8004a1c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80049e0:	4811      	ldr	r0, [pc, #68]	; (8004a28 <prvCheckForValidListAndQueue+0x58>)
 80049e2:	f7fe f821 	bl	8002a28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049e6:	4811      	ldr	r0, [pc, #68]	; (8004a2c <prvCheckForValidListAndQueue+0x5c>)
 80049e8:	f7fe f81e 	bl	8002a28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049ec:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <prvCheckForValidListAndQueue+0x60>)
 80049ee:	4a0e      	ldr	r2, [pc, #56]	; (8004a28 <prvCheckForValidListAndQueue+0x58>)
 80049f0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <prvCheckForValidListAndQueue+0x64>)
 80049f4:	4a0d      	ldr	r2, [pc, #52]	; (8004a2c <prvCheckForValidListAndQueue+0x5c>)
 80049f6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80049f8:	2200      	movs	r2, #0
 80049fa:	210c      	movs	r1, #12
 80049fc:	200a      	movs	r0, #10
 80049fe:	f7fe f92f 	bl	8002c60 <xQueueGenericCreate>
 8004a02:	4603      	mov	r3, r0
 8004a04:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <prvCheckForValidListAndQueue+0x54>)
 8004a06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <prvCheckForValidListAndQueue+0x54>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <prvCheckForValidListAndQueue+0x54>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4908      	ldr	r1, [pc, #32]	; (8004a38 <prvCheckForValidListAndQueue+0x68>)
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fd08 	bl	800342c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a1c:	f000 f97a 	bl	8004d14 <vPortExitCritical>
}
 8004a20:	bf00      	nop
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000360 	.word	0x20000360
 8004a28:	20000330 	.word	0x20000330
 8004a2c:	20000344 	.word	0x20000344
 8004a30:	20000358 	.word	0x20000358
 8004a34:	2000035c 	.word	0x2000035c
 8004a38:	08005ce4 	.word	0x08005ce4

08004a3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3b04      	subs	r3, #4
 8004a4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3b04      	subs	r3, #4
 8004a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f023 0201 	bic.w	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3b04      	subs	r3, #4
 8004a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a6c:	4a0c      	ldr	r2, [pc, #48]	; (8004aa0 <pxPortInitialiseStack+0x64>)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3b14      	subs	r3, #20
 8004a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3b04      	subs	r3, #4
 8004a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f06f 0202 	mvn.w	r2, #2
 8004a8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3b20      	subs	r3, #32
 8004a90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a92:	68fb      	ldr	r3, [r7, #12]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	08004aa5 	.word	0x08004aa5

08004aa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <prvTaskExitError+0x54>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab6:	d00a      	beq.n	8004ace <prvTaskExitError+0x2a>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	60fb      	str	r3, [r7, #12]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <prvTaskExitError+0x28>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	60bb      	str	r3, [r7, #8]
}
 8004ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ae2:	bf00      	nop
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0fc      	beq.n	8004ae4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aea:	bf00      	nop
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	00000000 	.word	0x00000000

08004b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <pxCurrentTCBConst2>)
 8004b02:	6819      	ldr	r1, [r3, #0]
 8004b04:	6808      	ldr	r0, [r1, #0]
 8004b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0a:	f380 8809 	msr	PSP, r0
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f04f 0000 	mov.w	r0, #0
 8004b16:	f380 8811 	msr	BASEPRI, r0
 8004b1a:	4770      	bx	lr
 8004b1c:	f3af 8000 	nop.w

08004b20 <pxCurrentTCBConst2>:
 8004b20:	20000164 	.word	0x20000164
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop

08004b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b28:	4808      	ldr	r0, [pc, #32]	; (8004b4c <prvPortStartFirstTask+0x24>)
 8004b2a:	6800      	ldr	r0, [r0, #0]
 8004b2c:	6800      	ldr	r0, [r0, #0]
 8004b2e:	f380 8808 	msr	MSP, r0
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f380 8814 	msr	CONTROL, r0
 8004b3a:	b662      	cpsie	i
 8004b3c:	b661      	cpsie	f
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	df00      	svc	0
 8004b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b4a:	bf00      	nop
 8004b4c:	e000ed08 	.word	0xe000ed08

08004b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b56:	4b4e      	ldr	r3, [pc, #312]	; (8004c90 <xPortStartScheduler+0x140>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a4e      	ldr	r2, [pc, #312]	; (8004c94 <xPortStartScheduler+0x144>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10a      	bne.n	8004b76 <xPortStartScheduler+0x26>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	61bb      	str	r3, [r7, #24]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b76:	4b46      	ldr	r3, [pc, #280]	; (8004c90 <xPortStartScheduler+0x140>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a47      	ldr	r2, [pc, #284]	; (8004c98 <xPortStartScheduler+0x148>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10a      	bne.n	8004b96 <xPortStartScheduler+0x46>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	617b      	str	r3, [r7, #20]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b96:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <xPortStartScheduler+0x14c>)
 8004b98:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	22ff      	movs	r2, #255	; 0xff
 8004ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <xPortStartScheduler+0x150>)
 8004bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bbe:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <xPortStartScheduler+0x154>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bc4:	e009      	b.n	8004bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004bc6:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <xPortStartScheduler+0x154>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	4a35      	ldr	r2, [pc, #212]	; (8004ca4 <xPortStartScheduler+0x154>)
 8004bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	d0ef      	beq.n	8004bc6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <xPortStartScheduler+0x154>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1c3 0307 	rsb	r3, r3, #7
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d00a      	beq.n	8004c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	613b      	str	r3, [r7, #16]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c08:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <xPortStartScheduler+0x154>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f1c3 0307 	rsb	r3, r3, #7
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d00a      	beq.n	8004c2a <xPortStartScheduler+0xda>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	60fb      	str	r3, [r7, #12]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <xPortStartScheduler+0x154>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <xPortStartScheduler+0x154>)
 8004c32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <xPortStartScheduler+0x154>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c3c:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <xPortStartScheduler+0x154>)
 8004c3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c48:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <xPortStartScheduler+0x158>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <xPortStartScheduler+0x158>)
 8004c4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c54:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <xPortStartScheduler+0x158>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <xPortStartScheduler+0x158>)
 8004c5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c60:	f000 f8dc 	bl	8004e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c64:	4b11      	ldr	r3, [pc, #68]	; (8004cac <xPortStartScheduler+0x15c>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c6a:	f000 f8fb 	bl	8004e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <xPortStartScheduler+0x160>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <xPortStartScheduler+0x160>)
 8004c74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c7a:	f7ff ff55 	bl	8004b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c7e:	f7fe ff65 	bl	8003b4c <vTaskSwitchContext>
	prvTaskExitError();
 8004c82:	f7ff ff0f 	bl	8004aa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	e000ed00 	.word	0xe000ed00
 8004c94:	410fc271 	.word	0x410fc271
 8004c98:	410fc270 	.word	0x410fc270
 8004c9c:	e000e400 	.word	0xe000e400
 8004ca0:	2000036c 	.word	0x2000036c
 8004ca4:	20000370 	.word	0x20000370
 8004ca8:	e000ed20 	.word	0xe000ed20
 8004cac:	2000000c 	.word	0x2000000c
 8004cb0:	e000ef34 	.word	0xe000ef34

08004cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	607b      	str	r3, [r7, #4]
}
 8004ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <vPortEnterCritical+0x58>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <vPortEnterCritical+0x58>)
 8004cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <vPortEnterCritical+0x58>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d10f      	bne.n	8004d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <vPortEnterCritical+0x5c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	603b      	str	r3, [r7, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	e7fe      	b.n	8004cfe <vPortEnterCritical+0x4a>
	}
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	2000000c 	.word	0x2000000c
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <vPortExitCritical+0x50>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <vPortExitCritical+0x24>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	607b      	str	r3, [r7, #4]
}
 8004d34:	bf00      	nop
 8004d36:	e7fe      	b.n	8004d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <vPortExitCritical+0x50>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <vPortExitCritical+0x50>)
 8004d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <vPortExitCritical+0x50>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <vPortExitCritical+0x42>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f383 8811 	msr	BASEPRI, r3
}
 8004d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	2000000c 	.word	0x2000000c
	...

08004d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d70:	f3ef 8009 	mrs	r0, PSP
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <pxCurrentTCBConst>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	f01e 0f10 	tst.w	lr, #16
 8004d80:	bf08      	it	eq
 8004d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8a:	6010      	str	r0, [r2, #0]
 8004d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d94:	f380 8811 	msr	BASEPRI, r0
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f7fe fed4 	bl	8003b4c <vTaskSwitchContext>
 8004da4:	f04f 0000 	mov.w	r0, #0
 8004da8:	f380 8811 	msr	BASEPRI, r0
 8004dac:	bc09      	pop	{r0, r3}
 8004dae:	6819      	ldr	r1, [r3, #0]
 8004db0:	6808      	ldr	r0, [r1, #0]
 8004db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db6:	f01e 0f10 	tst.w	lr, #16
 8004dba:	bf08      	it	eq
 8004dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004dc0:	f380 8809 	msr	PSP, r0
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst>:
 8004dd0:	20000164 	.word	0x20000164
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
}
 8004df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004df2:	f7fe fdf3 	bl	80039dc <xTaskIncrementTick>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <SysTick_Handler+0x40>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f383 8811 	msr	BASEPRI, r3
}
 8004e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <vPortSetupTimerInterrupt+0x34>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <vPortSetupTimerInterrupt+0x38>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <vPortSetupTimerInterrupt+0x3c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <vPortSetupTimerInterrupt+0x40>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	099b      	lsrs	r3, r3, #6
 8004e38:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <vPortSetupTimerInterrupt+0x44>)
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e3e:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <vPortSetupTimerInterrupt+0x34>)
 8004e40:	2207      	movs	r2, #7
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	e000e010 	.word	0xe000e010
 8004e54:	e000e018 	.word	0xe000e018
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	10624dd3 	.word	0x10624dd3
 8004e60:	e000e014 	.word	0xe000e014

08004e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e74 <vPortEnableVFP+0x10>
 8004e68:	6801      	ldr	r1, [r0, #0]
 8004e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e6e:	6001      	str	r1, [r0, #0]
 8004e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e72:	bf00      	nop
 8004e74:	e000ed88 	.word	0xe000ed88

08004e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e7e:	f3ef 8305 	mrs	r3, IPSR
 8004e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	d914      	bls.n	8004eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e8a:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <vPortValidateInterruptPriority+0x70>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e94:	4b15      	ldr	r3, [pc, #84]	; (8004eec <vPortValidateInterruptPriority+0x74>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	7afa      	ldrb	r2, [r7, #11]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d20a      	bcs.n	8004eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <vPortValidateInterruptPriority+0x78>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <vPortValidateInterruptPriority+0x7c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d90a      	bls.n	8004eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	603b      	str	r3, [r7, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <vPortValidateInterruptPriority+0x60>
	}
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	e000e3f0 	.word	0xe000e3f0
 8004eec:	2000036c 	.word	0x2000036c
 8004ef0:	e000ed0c 	.word	0xe000ed0c
 8004ef4:	20000370 	.word	0x20000370

08004ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f04:	f7fe fcb0 	bl	8003868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f08:	4b58      	ldr	r3, [pc, #352]	; (800506c <pvPortMalloc+0x174>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f10:	f000 f910 	bl	8005134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f14:	4b56      	ldr	r3, [pc, #344]	; (8005070 <pvPortMalloc+0x178>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 808e 	bne.w	800503e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01d      	beq.n	8004f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f28:	2208      	movs	r2, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d014      	beq.n	8004f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f023 0307 	bic.w	r3, r3, #7
 8004f40:	3308      	adds	r3, #8
 8004f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <pvPortMalloc+0x6c>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	617b      	str	r3, [r7, #20]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d069      	beq.n	800503e <pvPortMalloc+0x146>
 8004f6a:	4b42      	ldr	r3, [pc, #264]	; (8005074 <pvPortMalloc+0x17c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d864      	bhi.n	800503e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f74:	4b40      	ldr	r3, [pc, #256]	; (8005078 <pvPortMalloc+0x180>)
 8004f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f78:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <pvPortMalloc+0x180>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f7e:	e004      	b.n	8004f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d903      	bls.n	8004f9c <pvPortMalloc+0xa4>
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f1      	bne.n	8004f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f9c:	4b33      	ldr	r3, [pc, #204]	; (800506c <pvPortMalloc+0x174>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d04b      	beq.n	800503e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2208      	movs	r2, #8
 8004fac:	4413      	add	r3, r2
 8004fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d91f      	bls.n	8005008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	613b      	str	r3, [r7, #16]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005002:	69b8      	ldr	r0, [r7, #24]
 8005004:	f000 f8f8 	bl	80051f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <pvPortMalloc+0x17c>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	4a18      	ldr	r2, [pc, #96]	; (8005074 <pvPortMalloc+0x17c>)
 8005014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005016:	4b17      	ldr	r3, [pc, #92]	; (8005074 <pvPortMalloc+0x17c>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b18      	ldr	r3, [pc, #96]	; (800507c <pvPortMalloc+0x184>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d203      	bcs.n	800502a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <pvPortMalloc+0x17c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a15      	ldr	r2, [pc, #84]	; (800507c <pvPortMalloc+0x184>)
 8005028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <pvPortMalloc+0x178>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	431a      	orrs	r2, r3
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800503e:	f7fe fc21 	bl	8003884 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <pvPortMalloc+0x16a>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	60fb      	str	r3, [r7, #12]
}
 800505e:	bf00      	nop
 8005060:	e7fe      	b.n	8005060 <pvPortMalloc+0x168>
	return pvReturn;
 8005062:	69fb      	ldr	r3, [r7, #28]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3728      	adds	r7, #40	; 0x28
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20012f7c 	.word	0x20012f7c
 8005070:	20012f88 	.word	0x20012f88
 8005074:	20012f80 	.word	0x20012f80
 8005078:	20012f74 	.word	0x20012f74
 800507c:	20012f84 	.word	0x20012f84

08005080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d048      	beq.n	8005124 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005092:	2308      	movs	r3, #8
 8005094:	425b      	negs	r3, r3
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4413      	add	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	4b21      	ldr	r3, [pc, #132]	; (800512c <vPortFree+0xac>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <vPortFree+0x44>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60fb      	str	r3, [r7, #12]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <vPortFree+0x62>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	60bb      	str	r3, [r7, #8]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <vPortFree+0xac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d019      	beq.n	8005124 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d115      	bne.n	8005124 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <vPortFree+0xac>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	43db      	mvns	r3, r3
 8005102:	401a      	ands	r2, r3
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005108:	f7fe fbae 	bl	8003868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <vPortFree+0xb0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4413      	add	r3, r2
 8005116:	4a06      	ldr	r2, [pc, #24]	; (8005130 <vPortFree+0xb0>)
 8005118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800511a:	6938      	ldr	r0, [r7, #16]
 800511c:	f000 f86c 	bl	80051f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005120:	f7fe fbb0 	bl	8003884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005124:	bf00      	nop
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20012f88 	.word	0x20012f88
 8005130:	20012f80 	.word	0x20012f80

08005134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800513a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800513e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005140:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <prvHeapInit+0xac>)
 8005142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3307      	adds	r3, #7
 8005152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0307 	bic.w	r3, r3, #7
 800515a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <prvHeapInit+0xac>)
 8005164:	4413      	add	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800516c:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <prvHeapInit+0xb0>)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005172:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <prvHeapInit+0xb0>)
 8005174:	2200      	movs	r2, #0
 8005176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4413      	add	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005180:	2208      	movs	r2, #8
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <prvHeapInit+0xb4>)
 8005194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <prvHeapInit+0xb4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <prvHeapInit+0xb4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051b4:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <prvHeapInit+0xb4>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <prvHeapInit+0xb8>)
 80051c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <prvHeapInit+0xbc>)
 80051ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <prvHeapInit+0xc0>)
 80051ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	20000374 	.word	0x20000374
 80051e4:	20012f74 	.word	0x20012f74
 80051e8:	20012f7c 	.word	0x20012f7c
 80051ec:	20012f84 	.word	0x20012f84
 80051f0:	20012f80 	.word	0x20012f80
 80051f4:	20012f88 	.word	0x20012f88

080051f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005200:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <prvInsertBlockIntoFreeList+0xac>)
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e002      	b.n	800520c <prvInsertBlockIntoFreeList+0x14>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d8f7      	bhi.n	8005206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4413      	add	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d108      	bne.n	800523a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	441a      	add	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d118      	bne.n	8005280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d00d      	beq.n	8005276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	441a      	add	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e008      	b.n	8005288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e003      	b.n	8005288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d002      	beq.n	8005296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20012f74 	.word	0x20012f74
 80052a8:	20012f7c 	.word	0x20012f7c

080052ac <__errno>:
 80052ac:	4b01      	ldr	r3, [pc, #4]	; (80052b4 <__errno+0x8>)
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000010 	.word	0x20000010

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4d0d      	ldr	r5, [pc, #52]	; (80052f0 <__libc_init_array+0x38>)
 80052bc:	4c0d      	ldr	r4, [pc, #52]	; (80052f4 <__libc_init_array+0x3c>)
 80052be:	1b64      	subs	r4, r4, r5
 80052c0:	10a4      	asrs	r4, r4, #2
 80052c2:	2600      	movs	r6, #0
 80052c4:	42a6      	cmp	r6, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	4d0b      	ldr	r5, [pc, #44]	; (80052f8 <__libc_init_array+0x40>)
 80052ca:	4c0c      	ldr	r4, [pc, #48]	; (80052fc <__libc_init_array+0x44>)
 80052cc:	f000 fc8e 	bl	8005bec <_init>
 80052d0:	1b64      	subs	r4, r4, r5
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	2600      	movs	r6, #0
 80052d6:	42a6      	cmp	r6, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e0:	4798      	blx	r3
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ea:	4798      	blx	r3
 80052ec:	3601      	adds	r6, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	08005d40 	.word	0x08005d40
 80052f4:	08005d40 	.word	0x08005d40
 80052f8:	08005d40 	.word	0x08005d40
 80052fc:	08005d44 	.word	0x08005d44

08005300 <memcpy>:
 8005300:	440a      	add	r2, r1
 8005302:	4291      	cmp	r1, r2
 8005304:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005308:	d100      	bne.n	800530c <memcpy+0xc>
 800530a:	4770      	bx	lr
 800530c:	b510      	push	{r4, lr}
 800530e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005316:	4291      	cmp	r1, r2
 8005318:	d1f9      	bne.n	800530e <memcpy+0xe>
 800531a:	bd10      	pop	{r4, pc}

0800531c <memset>:
 800531c:	4402      	add	r2, r0
 800531e:	4603      	mov	r3, r0
 8005320:	4293      	cmp	r3, r2
 8005322:	d100      	bne.n	8005326 <memset+0xa>
 8005324:	4770      	bx	lr
 8005326:	f803 1b01 	strb.w	r1, [r3], #1
 800532a:	e7f9      	b.n	8005320 <memset+0x4>

0800532c <siprintf>:
 800532c:	b40e      	push	{r1, r2, r3}
 800532e:	b500      	push	{lr}
 8005330:	b09c      	sub	sp, #112	; 0x70
 8005332:	ab1d      	add	r3, sp, #116	; 0x74
 8005334:	9002      	str	r0, [sp, #8]
 8005336:	9006      	str	r0, [sp, #24]
 8005338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800533c:	4809      	ldr	r0, [pc, #36]	; (8005364 <siprintf+0x38>)
 800533e:	9107      	str	r1, [sp, #28]
 8005340:	9104      	str	r1, [sp, #16]
 8005342:	4909      	ldr	r1, [pc, #36]	; (8005368 <siprintf+0x3c>)
 8005344:	f853 2b04 	ldr.w	r2, [r3], #4
 8005348:	9105      	str	r1, [sp, #20]
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	a902      	add	r1, sp, #8
 8005350:	f000 f868 	bl	8005424 <_svfiprintf_r>
 8005354:	9b02      	ldr	r3, [sp, #8]
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	b01c      	add	sp, #112	; 0x70
 800535c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005360:	b003      	add	sp, #12
 8005362:	4770      	bx	lr
 8005364:	20000010 	.word	0x20000010
 8005368:	ffff0208 	.word	0xffff0208

0800536c <__ssputs_r>:
 800536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	688e      	ldr	r6, [r1, #8]
 8005372:	429e      	cmp	r6, r3
 8005374:	4682      	mov	sl, r0
 8005376:	460c      	mov	r4, r1
 8005378:	4690      	mov	r8, r2
 800537a:	461f      	mov	r7, r3
 800537c:	d838      	bhi.n	80053f0 <__ssputs_r+0x84>
 800537e:	898a      	ldrh	r2, [r1, #12]
 8005380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005384:	d032      	beq.n	80053ec <__ssputs_r+0x80>
 8005386:	6825      	ldr	r5, [r4, #0]
 8005388:	6909      	ldr	r1, [r1, #16]
 800538a:	eba5 0901 	sub.w	r9, r5, r1
 800538e:	6965      	ldr	r5, [r4, #20]
 8005390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005398:	3301      	adds	r3, #1
 800539a:	444b      	add	r3, r9
 800539c:	106d      	asrs	r5, r5, #1
 800539e:	429d      	cmp	r5, r3
 80053a0:	bf38      	it	cc
 80053a2:	461d      	movcc	r5, r3
 80053a4:	0553      	lsls	r3, r2, #21
 80053a6:	d531      	bpl.n	800540c <__ssputs_r+0xa0>
 80053a8:	4629      	mov	r1, r5
 80053aa:	f000 fb55 	bl	8005a58 <_malloc_r>
 80053ae:	4606      	mov	r6, r0
 80053b0:	b950      	cbnz	r0, 80053c8 <__ssputs_r+0x5c>
 80053b2:	230c      	movs	r3, #12
 80053b4:	f8ca 3000 	str.w	r3, [sl]
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c8:	6921      	ldr	r1, [r4, #16]
 80053ca:	464a      	mov	r2, r9
 80053cc:	f7ff ff98 	bl	8005300 <memcpy>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	6126      	str	r6, [r4, #16]
 80053de:	6165      	str	r5, [r4, #20]
 80053e0:	444e      	add	r6, r9
 80053e2:	eba5 0509 	sub.w	r5, r5, r9
 80053e6:	6026      	str	r6, [r4, #0]
 80053e8:	60a5      	str	r5, [r4, #8]
 80053ea:	463e      	mov	r6, r7
 80053ec:	42be      	cmp	r6, r7
 80053ee:	d900      	bls.n	80053f2 <__ssputs_r+0x86>
 80053f0:	463e      	mov	r6, r7
 80053f2:	6820      	ldr	r0, [r4, #0]
 80053f4:	4632      	mov	r2, r6
 80053f6:	4641      	mov	r1, r8
 80053f8:	f000 faa8 	bl	800594c <memmove>
 80053fc:	68a3      	ldr	r3, [r4, #8]
 80053fe:	1b9b      	subs	r3, r3, r6
 8005400:	60a3      	str	r3, [r4, #8]
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	4433      	add	r3, r6
 8005406:	6023      	str	r3, [r4, #0]
 8005408:	2000      	movs	r0, #0
 800540a:	e7db      	b.n	80053c4 <__ssputs_r+0x58>
 800540c:	462a      	mov	r2, r5
 800540e:	f000 fb97 	bl	8005b40 <_realloc_r>
 8005412:	4606      	mov	r6, r0
 8005414:	2800      	cmp	r0, #0
 8005416:	d1e1      	bne.n	80053dc <__ssputs_r+0x70>
 8005418:	6921      	ldr	r1, [r4, #16]
 800541a:	4650      	mov	r0, sl
 800541c:	f000 fab0 	bl	8005980 <_free_r>
 8005420:	e7c7      	b.n	80053b2 <__ssputs_r+0x46>
	...

08005424 <_svfiprintf_r>:
 8005424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005428:	4698      	mov	r8, r3
 800542a:	898b      	ldrh	r3, [r1, #12]
 800542c:	061b      	lsls	r3, r3, #24
 800542e:	b09d      	sub	sp, #116	; 0x74
 8005430:	4607      	mov	r7, r0
 8005432:	460d      	mov	r5, r1
 8005434:	4614      	mov	r4, r2
 8005436:	d50e      	bpl.n	8005456 <_svfiprintf_r+0x32>
 8005438:	690b      	ldr	r3, [r1, #16]
 800543a:	b963      	cbnz	r3, 8005456 <_svfiprintf_r+0x32>
 800543c:	2140      	movs	r1, #64	; 0x40
 800543e:	f000 fb0b 	bl	8005a58 <_malloc_r>
 8005442:	6028      	str	r0, [r5, #0]
 8005444:	6128      	str	r0, [r5, #16]
 8005446:	b920      	cbnz	r0, 8005452 <_svfiprintf_r+0x2e>
 8005448:	230c      	movs	r3, #12
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005450:	e0d1      	b.n	80055f6 <_svfiprintf_r+0x1d2>
 8005452:	2340      	movs	r3, #64	; 0x40
 8005454:	616b      	str	r3, [r5, #20]
 8005456:	2300      	movs	r3, #0
 8005458:	9309      	str	r3, [sp, #36]	; 0x24
 800545a:	2320      	movs	r3, #32
 800545c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005460:	f8cd 800c 	str.w	r8, [sp, #12]
 8005464:	2330      	movs	r3, #48	; 0x30
 8005466:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005610 <_svfiprintf_r+0x1ec>
 800546a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800546e:	f04f 0901 	mov.w	r9, #1
 8005472:	4623      	mov	r3, r4
 8005474:	469a      	mov	sl, r3
 8005476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800547a:	b10a      	cbz	r2, 8005480 <_svfiprintf_r+0x5c>
 800547c:	2a25      	cmp	r2, #37	; 0x25
 800547e:	d1f9      	bne.n	8005474 <_svfiprintf_r+0x50>
 8005480:	ebba 0b04 	subs.w	fp, sl, r4
 8005484:	d00b      	beq.n	800549e <_svfiprintf_r+0x7a>
 8005486:	465b      	mov	r3, fp
 8005488:	4622      	mov	r2, r4
 800548a:	4629      	mov	r1, r5
 800548c:	4638      	mov	r0, r7
 800548e:	f7ff ff6d 	bl	800536c <__ssputs_r>
 8005492:	3001      	adds	r0, #1
 8005494:	f000 80aa 	beq.w	80055ec <_svfiprintf_r+0x1c8>
 8005498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800549a:	445a      	add	r2, fp
 800549c:	9209      	str	r2, [sp, #36]	; 0x24
 800549e:	f89a 3000 	ldrb.w	r3, [sl]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80a2 	beq.w	80055ec <_svfiprintf_r+0x1c8>
 80054a8:	2300      	movs	r3, #0
 80054aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054b2:	f10a 0a01 	add.w	sl, sl, #1
 80054b6:	9304      	str	r3, [sp, #16]
 80054b8:	9307      	str	r3, [sp, #28]
 80054ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054be:	931a      	str	r3, [sp, #104]	; 0x68
 80054c0:	4654      	mov	r4, sl
 80054c2:	2205      	movs	r2, #5
 80054c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c8:	4851      	ldr	r0, [pc, #324]	; (8005610 <_svfiprintf_r+0x1ec>)
 80054ca:	f7fa fe89 	bl	80001e0 <memchr>
 80054ce:	9a04      	ldr	r2, [sp, #16]
 80054d0:	b9d8      	cbnz	r0, 800550a <_svfiprintf_r+0xe6>
 80054d2:	06d0      	lsls	r0, r2, #27
 80054d4:	bf44      	itt	mi
 80054d6:	2320      	movmi	r3, #32
 80054d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054dc:	0711      	lsls	r1, r2, #28
 80054de:	bf44      	itt	mi
 80054e0:	232b      	movmi	r3, #43	; 0x2b
 80054e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054e6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ea:	2b2a      	cmp	r3, #42	; 0x2a
 80054ec:	d015      	beq.n	800551a <_svfiprintf_r+0xf6>
 80054ee:	9a07      	ldr	r2, [sp, #28]
 80054f0:	4654      	mov	r4, sl
 80054f2:	2000      	movs	r0, #0
 80054f4:	f04f 0c0a 	mov.w	ip, #10
 80054f8:	4621      	mov	r1, r4
 80054fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054fe:	3b30      	subs	r3, #48	; 0x30
 8005500:	2b09      	cmp	r3, #9
 8005502:	d94e      	bls.n	80055a2 <_svfiprintf_r+0x17e>
 8005504:	b1b0      	cbz	r0, 8005534 <_svfiprintf_r+0x110>
 8005506:	9207      	str	r2, [sp, #28]
 8005508:	e014      	b.n	8005534 <_svfiprintf_r+0x110>
 800550a:	eba0 0308 	sub.w	r3, r0, r8
 800550e:	fa09 f303 	lsl.w	r3, r9, r3
 8005512:	4313      	orrs	r3, r2
 8005514:	9304      	str	r3, [sp, #16]
 8005516:	46a2      	mov	sl, r4
 8005518:	e7d2      	b.n	80054c0 <_svfiprintf_r+0x9c>
 800551a:	9b03      	ldr	r3, [sp, #12]
 800551c:	1d19      	adds	r1, r3, #4
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	9103      	str	r1, [sp, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	bfbb      	ittet	lt
 8005526:	425b      	neglt	r3, r3
 8005528:	f042 0202 	orrlt.w	r2, r2, #2
 800552c:	9307      	strge	r3, [sp, #28]
 800552e:	9307      	strlt	r3, [sp, #28]
 8005530:	bfb8      	it	lt
 8005532:	9204      	strlt	r2, [sp, #16]
 8005534:	7823      	ldrb	r3, [r4, #0]
 8005536:	2b2e      	cmp	r3, #46	; 0x2e
 8005538:	d10c      	bne.n	8005554 <_svfiprintf_r+0x130>
 800553a:	7863      	ldrb	r3, [r4, #1]
 800553c:	2b2a      	cmp	r3, #42	; 0x2a
 800553e:	d135      	bne.n	80055ac <_svfiprintf_r+0x188>
 8005540:	9b03      	ldr	r3, [sp, #12]
 8005542:	1d1a      	adds	r2, r3, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	9203      	str	r2, [sp, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	bfb8      	it	lt
 800554c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005550:	3402      	adds	r4, #2
 8005552:	9305      	str	r3, [sp, #20]
 8005554:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005620 <_svfiprintf_r+0x1fc>
 8005558:	7821      	ldrb	r1, [r4, #0]
 800555a:	2203      	movs	r2, #3
 800555c:	4650      	mov	r0, sl
 800555e:	f7fa fe3f 	bl	80001e0 <memchr>
 8005562:	b140      	cbz	r0, 8005576 <_svfiprintf_r+0x152>
 8005564:	2340      	movs	r3, #64	; 0x40
 8005566:	eba0 000a 	sub.w	r0, r0, sl
 800556a:	fa03 f000 	lsl.w	r0, r3, r0
 800556e:	9b04      	ldr	r3, [sp, #16]
 8005570:	4303      	orrs	r3, r0
 8005572:	3401      	adds	r4, #1
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800557a:	4826      	ldr	r0, [pc, #152]	; (8005614 <_svfiprintf_r+0x1f0>)
 800557c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005580:	2206      	movs	r2, #6
 8005582:	f7fa fe2d 	bl	80001e0 <memchr>
 8005586:	2800      	cmp	r0, #0
 8005588:	d038      	beq.n	80055fc <_svfiprintf_r+0x1d8>
 800558a:	4b23      	ldr	r3, [pc, #140]	; (8005618 <_svfiprintf_r+0x1f4>)
 800558c:	bb1b      	cbnz	r3, 80055d6 <_svfiprintf_r+0x1b2>
 800558e:	9b03      	ldr	r3, [sp, #12]
 8005590:	3307      	adds	r3, #7
 8005592:	f023 0307 	bic.w	r3, r3, #7
 8005596:	3308      	adds	r3, #8
 8005598:	9303      	str	r3, [sp, #12]
 800559a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559c:	4433      	add	r3, r6
 800559e:	9309      	str	r3, [sp, #36]	; 0x24
 80055a0:	e767      	b.n	8005472 <_svfiprintf_r+0x4e>
 80055a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80055a6:	460c      	mov	r4, r1
 80055a8:	2001      	movs	r0, #1
 80055aa:	e7a5      	b.n	80054f8 <_svfiprintf_r+0xd4>
 80055ac:	2300      	movs	r3, #0
 80055ae:	3401      	adds	r4, #1
 80055b0:	9305      	str	r3, [sp, #20]
 80055b2:	4619      	mov	r1, r3
 80055b4:	f04f 0c0a 	mov.w	ip, #10
 80055b8:	4620      	mov	r0, r4
 80055ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055be:	3a30      	subs	r2, #48	; 0x30
 80055c0:	2a09      	cmp	r2, #9
 80055c2:	d903      	bls.n	80055cc <_svfiprintf_r+0x1a8>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0c5      	beq.n	8005554 <_svfiprintf_r+0x130>
 80055c8:	9105      	str	r1, [sp, #20]
 80055ca:	e7c3      	b.n	8005554 <_svfiprintf_r+0x130>
 80055cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80055d0:	4604      	mov	r4, r0
 80055d2:	2301      	movs	r3, #1
 80055d4:	e7f0      	b.n	80055b8 <_svfiprintf_r+0x194>
 80055d6:	ab03      	add	r3, sp, #12
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	462a      	mov	r2, r5
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <_svfiprintf_r+0x1f8>)
 80055de:	a904      	add	r1, sp, #16
 80055e0:	4638      	mov	r0, r7
 80055e2:	f3af 8000 	nop.w
 80055e6:	1c42      	adds	r2, r0, #1
 80055e8:	4606      	mov	r6, r0
 80055ea:	d1d6      	bne.n	800559a <_svfiprintf_r+0x176>
 80055ec:	89ab      	ldrh	r3, [r5, #12]
 80055ee:	065b      	lsls	r3, r3, #25
 80055f0:	f53f af2c 	bmi.w	800544c <_svfiprintf_r+0x28>
 80055f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055f6:	b01d      	add	sp, #116	; 0x74
 80055f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fc:	ab03      	add	r3, sp, #12
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	462a      	mov	r2, r5
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <_svfiprintf_r+0x1f8>)
 8005604:	a904      	add	r1, sp, #16
 8005606:	4638      	mov	r0, r7
 8005608:	f000 f87a 	bl	8005700 <_printf_i>
 800560c:	e7eb      	b.n	80055e6 <_svfiprintf_r+0x1c2>
 800560e:	bf00      	nop
 8005610:	08005d04 	.word	0x08005d04
 8005614:	08005d0e 	.word	0x08005d0e
 8005618:	00000000 	.word	0x00000000
 800561c:	0800536d 	.word	0x0800536d
 8005620:	08005d0a 	.word	0x08005d0a

08005624 <_printf_common>:
 8005624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	4616      	mov	r6, r2
 800562a:	4699      	mov	r9, r3
 800562c:	688a      	ldr	r2, [r1, #8]
 800562e:	690b      	ldr	r3, [r1, #16]
 8005630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005634:	4293      	cmp	r3, r2
 8005636:	bfb8      	it	lt
 8005638:	4613      	movlt	r3, r2
 800563a:	6033      	str	r3, [r6, #0]
 800563c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005640:	4607      	mov	r7, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b10a      	cbz	r2, 800564a <_printf_common+0x26>
 8005646:	3301      	adds	r3, #1
 8005648:	6033      	str	r3, [r6, #0]
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	0699      	lsls	r1, r3, #26
 800564e:	bf42      	ittt	mi
 8005650:	6833      	ldrmi	r3, [r6, #0]
 8005652:	3302      	addmi	r3, #2
 8005654:	6033      	strmi	r3, [r6, #0]
 8005656:	6825      	ldr	r5, [r4, #0]
 8005658:	f015 0506 	ands.w	r5, r5, #6
 800565c:	d106      	bne.n	800566c <_printf_common+0x48>
 800565e:	f104 0a19 	add.w	sl, r4, #25
 8005662:	68e3      	ldr	r3, [r4, #12]
 8005664:	6832      	ldr	r2, [r6, #0]
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	42ab      	cmp	r3, r5
 800566a:	dc26      	bgt.n	80056ba <_printf_common+0x96>
 800566c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005670:	1e13      	subs	r3, r2, #0
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	bf18      	it	ne
 8005676:	2301      	movne	r3, #1
 8005678:	0692      	lsls	r2, r2, #26
 800567a:	d42b      	bmi.n	80056d4 <_printf_common+0xb0>
 800567c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005680:	4649      	mov	r1, r9
 8005682:	4638      	mov	r0, r7
 8005684:	47c0      	blx	r8
 8005686:	3001      	adds	r0, #1
 8005688:	d01e      	beq.n	80056c8 <_printf_common+0xa4>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	68e5      	ldr	r5, [r4, #12]
 800568e:	6832      	ldr	r2, [r6, #0]
 8005690:	f003 0306 	and.w	r3, r3, #6
 8005694:	2b04      	cmp	r3, #4
 8005696:	bf08      	it	eq
 8005698:	1aad      	subeq	r5, r5, r2
 800569a:	68a3      	ldr	r3, [r4, #8]
 800569c:	6922      	ldr	r2, [r4, #16]
 800569e:	bf0c      	ite	eq
 80056a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a4:	2500      	movne	r5, #0
 80056a6:	4293      	cmp	r3, r2
 80056a8:	bfc4      	itt	gt
 80056aa:	1a9b      	subgt	r3, r3, r2
 80056ac:	18ed      	addgt	r5, r5, r3
 80056ae:	2600      	movs	r6, #0
 80056b0:	341a      	adds	r4, #26
 80056b2:	42b5      	cmp	r5, r6
 80056b4:	d11a      	bne.n	80056ec <_printf_common+0xc8>
 80056b6:	2000      	movs	r0, #0
 80056b8:	e008      	b.n	80056cc <_printf_common+0xa8>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4652      	mov	r2, sl
 80056be:	4649      	mov	r1, r9
 80056c0:	4638      	mov	r0, r7
 80056c2:	47c0      	blx	r8
 80056c4:	3001      	adds	r0, #1
 80056c6:	d103      	bne.n	80056d0 <_printf_common+0xac>
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d0:	3501      	adds	r5, #1
 80056d2:	e7c6      	b.n	8005662 <_printf_common+0x3e>
 80056d4:	18e1      	adds	r1, r4, r3
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	2030      	movs	r0, #48	; 0x30
 80056da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056de:	4422      	add	r2, r4
 80056e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e8:	3302      	adds	r3, #2
 80056ea:	e7c7      	b.n	800567c <_printf_common+0x58>
 80056ec:	2301      	movs	r3, #1
 80056ee:	4622      	mov	r2, r4
 80056f0:	4649      	mov	r1, r9
 80056f2:	4638      	mov	r0, r7
 80056f4:	47c0      	blx	r8
 80056f6:	3001      	adds	r0, #1
 80056f8:	d0e6      	beq.n	80056c8 <_printf_common+0xa4>
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7d9      	b.n	80056b2 <_printf_common+0x8e>
	...

08005700 <_printf_i>:
 8005700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	7e0f      	ldrb	r7, [r1, #24]
 8005706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005708:	2f78      	cmp	r7, #120	; 0x78
 800570a:	4691      	mov	r9, r2
 800570c:	4680      	mov	r8, r0
 800570e:	460c      	mov	r4, r1
 8005710:	469a      	mov	sl, r3
 8005712:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005716:	d807      	bhi.n	8005728 <_printf_i+0x28>
 8005718:	2f62      	cmp	r7, #98	; 0x62
 800571a:	d80a      	bhi.n	8005732 <_printf_i+0x32>
 800571c:	2f00      	cmp	r7, #0
 800571e:	f000 80d8 	beq.w	80058d2 <_printf_i+0x1d2>
 8005722:	2f58      	cmp	r7, #88	; 0x58
 8005724:	f000 80a3 	beq.w	800586e <_printf_i+0x16e>
 8005728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800572c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005730:	e03a      	b.n	80057a8 <_printf_i+0xa8>
 8005732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005736:	2b15      	cmp	r3, #21
 8005738:	d8f6      	bhi.n	8005728 <_printf_i+0x28>
 800573a:	a101      	add	r1, pc, #4	; (adr r1, 8005740 <_printf_i+0x40>)
 800573c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005740:	08005799 	.word	0x08005799
 8005744:	080057ad 	.word	0x080057ad
 8005748:	08005729 	.word	0x08005729
 800574c:	08005729 	.word	0x08005729
 8005750:	08005729 	.word	0x08005729
 8005754:	08005729 	.word	0x08005729
 8005758:	080057ad 	.word	0x080057ad
 800575c:	08005729 	.word	0x08005729
 8005760:	08005729 	.word	0x08005729
 8005764:	08005729 	.word	0x08005729
 8005768:	08005729 	.word	0x08005729
 800576c:	080058b9 	.word	0x080058b9
 8005770:	080057dd 	.word	0x080057dd
 8005774:	0800589b 	.word	0x0800589b
 8005778:	08005729 	.word	0x08005729
 800577c:	08005729 	.word	0x08005729
 8005780:	080058db 	.word	0x080058db
 8005784:	08005729 	.word	0x08005729
 8005788:	080057dd 	.word	0x080057dd
 800578c:	08005729 	.word	0x08005729
 8005790:	08005729 	.word	0x08005729
 8005794:	080058a3 	.word	0x080058a3
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	602a      	str	r2, [r5, #0]
 80057a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0a3      	b.n	80058f4 <_printf_i+0x1f4>
 80057ac:	6820      	ldr	r0, [r4, #0]
 80057ae:	6829      	ldr	r1, [r5, #0]
 80057b0:	0606      	lsls	r6, r0, #24
 80057b2:	f101 0304 	add.w	r3, r1, #4
 80057b6:	d50a      	bpl.n	80057ce <_printf_i+0xce>
 80057b8:	680e      	ldr	r6, [r1, #0]
 80057ba:	602b      	str	r3, [r5, #0]
 80057bc:	2e00      	cmp	r6, #0
 80057be:	da03      	bge.n	80057c8 <_printf_i+0xc8>
 80057c0:	232d      	movs	r3, #45	; 0x2d
 80057c2:	4276      	negs	r6, r6
 80057c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c8:	485e      	ldr	r0, [pc, #376]	; (8005944 <_printf_i+0x244>)
 80057ca:	230a      	movs	r3, #10
 80057cc:	e019      	b.n	8005802 <_printf_i+0x102>
 80057ce:	680e      	ldr	r6, [r1, #0]
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057d6:	bf18      	it	ne
 80057d8:	b236      	sxthne	r6, r6
 80057da:	e7ef      	b.n	80057bc <_printf_i+0xbc>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	6820      	ldr	r0, [r4, #0]
 80057e0:	1d19      	adds	r1, r3, #4
 80057e2:	6029      	str	r1, [r5, #0]
 80057e4:	0601      	lsls	r1, r0, #24
 80057e6:	d501      	bpl.n	80057ec <_printf_i+0xec>
 80057e8:	681e      	ldr	r6, [r3, #0]
 80057ea:	e002      	b.n	80057f2 <_printf_i+0xf2>
 80057ec:	0646      	lsls	r6, r0, #25
 80057ee:	d5fb      	bpl.n	80057e8 <_printf_i+0xe8>
 80057f0:	881e      	ldrh	r6, [r3, #0]
 80057f2:	4854      	ldr	r0, [pc, #336]	; (8005944 <_printf_i+0x244>)
 80057f4:	2f6f      	cmp	r7, #111	; 0x6f
 80057f6:	bf0c      	ite	eq
 80057f8:	2308      	moveq	r3, #8
 80057fa:	230a      	movne	r3, #10
 80057fc:	2100      	movs	r1, #0
 80057fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005802:	6865      	ldr	r5, [r4, #4]
 8005804:	60a5      	str	r5, [r4, #8]
 8005806:	2d00      	cmp	r5, #0
 8005808:	bfa2      	ittt	ge
 800580a:	6821      	ldrge	r1, [r4, #0]
 800580c:	f021 0104 	bicge.w	r1, r1, #4
 8005810:	6021      	strge	r1, [r4, #0]
 8005812:	b90e      	cbnz	r6, 8005818 <_printf_i+0x118>
 8005814:	2d00      	cmp	r5, #0
 8005816:	d04d      	beq.n	80058b4 <_printf_i+0x1b4>
 8005818:	4615      	mov	r5, r2
 800581a:	fbb6 f1f3 	udiv	r1, r6, r3
 800581e:	fb03 6711 	mls	r7, r3, r1, r6
 8005822:	5dc7      	ldrb	r7, [r0, r7]
 8005824:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005828:	4637      	mov	r7, r6
 800582a:	42bb      	cmp	r3, r7
 800582c:	460e      	mov	r6, r1
 800582e:	d9f4      	bls.n	800581a <_printf_i+0x11a>
 8005830:	2b08      	cmp	r3, #8
 8005832:	d10b      	bne.n	800584c <_printf_i+0x14c>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	07de      	lsls	r6, r3, #31
 8005838:	d508      	bpl.n	800584c <_printf_i+0x14c>
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	6861      	ldr	r1, [r4, #4]
 800583e:	4299      	cmp	r1, r3
 8005840:	bfde      	ittt	le
 8005842:	2330      	movle	r3, #48	; 0x30
 8005844:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005848:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800584c:	1b52      	subs	r2, r2, r5
 800584e:	6122      	str	r2, [r4, #16]
 8005850:	f8cd a000 	str.w	sl, [sp]
 8005854:	464b      	mov	r3, r9
 8005856:	aa03      	add	r2, sp, #12
 8005858:	4621      	mov	r1, r4
 800585a:	4640      	mov	r0, r8
 800585c:	f7ff fee2 	bl	8005624 <_printf_common>
 8005860:	3001      	adds	r0, #1
 8005862:	d14c      	bne.n	80058fe <_printf_i+0x1fe>
 8005864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005868:	b004      	add	sp, #16
 800586a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586e:	4835      	ldr	r0, [pc, #212]	; (8005944 <_printf_i+0x244>)
 8005870:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005874:	6829      	ldr	r1, [r5, #0]
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	f851 6b04 	ldr.w	r6, [r1], #4
 800587c:	6029      	str	r1, [r5, #0]
 800587e:	061d      	lsls	r5, r3, #24
 8005880:	d514      	bpl.n	80058ac <_printf_i+0x1ac>
 8005882:	07df      	lsls	r7, r3, #31
 8005884:	bf44      	itt	mi
 8005886:	f043 0320 	orrmi.w	r3, r3, #32
 800588a:	6023      	strmi	r3, [r4, #0]
 800588c:	b91e      	cbnz	r6, 8005896 <_printf_i+0x196>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	f023 0320 	bic.w	r3, r3, #32
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	2310      	movs	r3, #16
 8005898:	e7b0      	b.n	80057fc <_printf_i+0xfc>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f043 0320 	orr.w	r3, r3, #32
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	2378      	movs	r3, #120	; 0x78
 80058a4:	4828      	ldr	r0, [pc, #160]	; (8005948 <_printf_i+0x248>)
 80058a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058aa:	e7e3      	b.n	8005874 <_printf_i+0x174>
 80058ac:	0659      	lsls	r1, r3, #25
 80058ae:	bf48      	it	mi
 80058b0:	b2b6      	uxthmi	r6, r6
 80058b2:	e7e6      	b.n	8005882 <_printf_i+0x182>
 80058b4:	4615      	mov	r5, r2
 80058b6:	e7bb      	b.n	8005830 <_printf_i+0x130>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	6826      	ldr	r6, [r4, #0]
 80058bc:	6961      	ldr	r1, [r4, #20]
 80058be:	1d18      	adds	r0, r3, #4
 80058c0:	6028      	str	r0, [r5, #0]
 80058c2:	0635      	lsls	r5, r6, #24
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	d501      	bpl.n	80058cc <_printf_i+0x1cc>
 80058c8:	6019      	str	r1, [r3, #0]
 80058ca:	e002      	b.n	80058d2 <_printf_i+0x1d2>
 80058cc:	0670      	lsls	r0, r6, #25
 80058ce:	d5fb      	bpl.n	80058c8 <_printf_i+0x1c8>
 80058d0:	8019      	strh	r1, [r3, #0]
 80058d2:	2300      	movs	r3, #0
 80058d4:	6123      	str	r3, [r4, #16]
 80058d6:	4615      	mov	r5, r2
 80058d8:	e7ba      	b.n	8005850 <_printf_i+0x150>
 80058da:	682b      	ldr	r3, [r5, #0]
 80058dc:	1d1a      	adds	r2, r3, #4
 80058de:	602a      	str	r2, [r5, #0]
 80058e0:	681d      	ldr	r5, [r3, #0]
 80058e2:	6862      	ldr	r2, [r4, #4]
 80058e4:	2100      	movs	r1, #0
 80058e6:	4628      	mov	r0, r5
 80058e8:	f7fa fc7a 	bl	80001e0 <memchr>
 80058ec:	b108      	cbz	r0, 80058f2 <_printf_i+0x1f2>
 80058ee:	1b40      	subs	r0, r0, r5
 80058f0:	6060      	str	r0, [r4, #4]
 80058f2:	6863      	ldr	r3, [r4, #4]
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	2300      	movs	r3, #0
 80058f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fc:	e7a8      	b.n	8005850 <_printf_i+0x150>
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	462a      	mov	r2, r5
 8005902:	4649      	mov	r1, r9
 8005904:	4640      	mov	r0, r8
 8005906:	47d0      	blx	sl
 8005908:	3001      	adds	r0, #1
 800590a:	d0ab      	beq.n	8005864 <_printf_i+0x164>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	079b      	lsls	r3, r3, #30
 8005910:	d413      	bmi.n	800593a <_printf_i+0x23a>
 8005912:	68e0      	ldr	r0, [r4, #12]
 8005914:	9b03      	ldr	r3, [sp, #12]
 8005916:	4298      	cmp	r0, r3
 8005918:	bfb8      	it	lt
 800591a:	4618      	movlt	r0, r3
 800591c:	e7a4      	b.n	8005868 <_printf_i+0x168>
 800591e:	2301      	movs	r3, #1
 8005920:	4632      	mov	r2, r6
 8005922:	4649      	mov	r1, r9
 8005924:	4640      	mov	r0, r8
 8005926:	47d0      	blx	sl
 8005928:	3001      	adds	r0, #1
 800592a:	d09b      	beq.n	8005864 <_printf_i+0x164>
 800592c:	3501      	adds	r5, #1
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	9903      	ldr	r1, [sp, #12]
 8005932:	1a5b      	subs	r3, r3, r1
 8005934:	42ab      	cmp	r3, r5
 8005936:	dcf2      	bgt.n	800591e <_printf_i+0x21e>
 8005938:	e7eb      	b.n	8005912 <_printf_i+0x212>
 800593a:	2500      	movs	r5, #0
 800593c:	f104 0619 	add.w	r6, r4, #25
 8005940:	e7f5      	b.n	800592e <_printf_i+0x22e>
 8005942:	bf00      	nop
 8005944:	08005d15 	.word	0x08005d15
 8005948:	08005d26 	.word	0x08005d26

0800594c <memmove>:
 800594c:	4288      	cmp	r0, r1
 800594e:	b510      	push	{r4, lr}
 8005950:	eb01 0402 	add.w	r4, r1, r2
 8005954:	d902      	bls.n	800595c <memmove+0x10>
 8005956:	4284      	cmp	r4, r0
 8005958:	4623      	mov	r3, r4
 800595a:	d807      	bhi.n	800596c <memmove+0x20>
 800595c:	1e43      	subs	r3, r0, #1
 800595e:	42a1      	cmp	r1, r4
 8005960:	d008      	beq.n	8005974 <memmove+0x28>
 8005962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800596a:	e7f8      	b.n	800595e <memmove+0x12>
 800596c:	4402      	add	r2, r0
 800596e:	4601      	mov	r1, r0
 8005970:	428a      	cmp	r2, r1
 8005972:	d100      	bne.n	8005976 <memmove+0x2a>
 8005974:	bd10      	pop	{r4, pc}
 8005976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800597a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800597e:	e7f7      	b.n	8005970 <memmove+0x24>

08005980 <_free_r>:
 8005980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005982:	2900      	cmp	r1, #0
 8005984:	d044      	beq.n	8005a10 <_free_r+0x90>
 8005986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598a:	9001      	str	r0, [sp, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f1a1 0404 	sub.w	r4, r1, #4
 8005992:	bfb8      	it	lt
 8005994:	18e4      	addlt	r4, r4, r3
 8005996:	f000 f913 	bl	8005bc0 <__malloc_lock>
 800599a:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <_free_r+0x94>)
 800599c:	9801      	ldr	r0, [sp, #4]
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	b933      	cbnz	r3, 80059b0 <_free_r+0x30>
 80059a2:	6063      	str	r3, [r4, #4]
 80059a4:	6014      	str	r4, [r2, #0]
 80059a6:	b003      	add	sp, #12
 80059a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059ac:	f000 b90e 	b.w	8005bcc <__malloc_unlock>
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d908      	bls.n	80059c6 <_free_r+0x46>
 80059b4:	6825      	ldr	r5, [r4, #0]
 80059b6:	1961      	adds	r1, r4, r5
 80059b8:	428b      	cmp	r3, r1
 80059ba:	bf01      	itttt	eq
 80059bc:	6819      	ldreq	r1, [r3, #0]
 80059be:	685b      	ldreq	r3, [r3, #4]
 80059c0:	1949      	addeq	r1, r1, r5
 80059c2:	6021      	streq	r1, [r4, #0]
 80059c4:	e7ed      	b.n	80059a2 <_free_r+0x22>
 80059c6:	461a      	mov	r2, r3
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	b10b      	cbz	r3, 80059d0 <_free_r+0x50>
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	d9fa      	bls.n	80059c6 <_free_r+0x46>
 80059d0:	6811      	ldr	r1, [r2, #0]
 80059d2:	1855      	adds	r5, r2, r1
 80059d4:	42a5      	cmp	r5, r4
 80059d6:	d10b      	bne.n	80059f0 <_free_r+0x70>
 80059d8:	6824      	ldr	r4, [r4, #0]
 80059da:	4421      	add	r1, r4
 80059dc:	1854      	adds	r4, r2, r1
 80059de:	42a3      	cmp	r3, r4
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	d1e0      	bne.n	80059a6 <_free_r+0x26>
 80059e4:	681c      	ldr	r4, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	6053      	str	r3, [r2, #4]
 80059ea:	4421      	add	r1, r4
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	e7da      	b.n	80059a6 <_free_r+0x26>
 80059f0:	d902      	bls.n	80059f8 <_free_r+0x78>
 80059f2:	230c      	movs	r3, #12
 80059f4:	6003      	str	r3, [r0, #0]
 80059f6:	e7d6      	b.n	80059a6 <_free_r+0x26>
 80059f8:	6825      	ldr	r5, [r4, #0]
 80059fa:	1961      	adds	r1, r4, r5
 80059fc:	428b      	cmp	r3, r1
 80059fe:	bf04      	itt	eq
 8005a00:	6819      	ldreq	r1, [r3, #0]
 8005a02:	685b      	ldreq	r3, [r3, #4]
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	bf04      	itt	eq
 8005a08:	1949      	addeq	r1, r1, r5
 8005a0a:	6021      	streq	r1, [r4, #0]
 8005a0c:	6054      	str	r4, [r2, #4]
 8005a0e:	e7ca      	b.n	80059a6 <_free_r+0x26>
 8005a10:	b003      	add	sp, #12
 8005a12:	bd30      	pop	{r4, r5, pc}
 8005a14:	20012f8c 	.word	0x20012f8c

08005a18 <sbrk_aligned>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4e0e      	ldr	r6, [pc, #56]	; (8005a54 <sbrk_aligned+0x3c>)
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	6831      	ldr	r1, [r6, #0]
 8005a20:	4605      	mov	r5, r0
 8005a22:	b911      	cbnz	r1, 8005a2a <sbrk_aligned+0x12>
 8005a24:	f000 f8bc 	bl	8005ba0 <_sbrk_r>
 8005a28:	6030      	str	r0, [r6, #0]
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f000 f8b7 	bl	8005ba0 <_sbrk_r>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	d00a      	beq.n	8005a4c <sbrk_aligned+0x34>
 8005a36:	1cc4      	adds	r4, r0, #3
 8005a38:	f024 0403 	bic.w	r4, r4, #3
 8005a3c:	42a0      	cmp	r0, r4
 8005a3e:	d007      	beq.n	8005a50 <sbrk_aligned+0x38>
 8005a40:	1a21      	subs	r1, r4, r0
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 f8ac 	bl	8005ba0 <_sbrk_r>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d101      	bne.n	8005a50 <sbrk_aligned+0x38>
 8005a4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a50:	4620      	mov	r0, r4
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	20012f90 	.word	0x20012f90

08005a58 <_malloc_r>:
 8005a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5c:	1ccd      	adds	r5, r1, #3
 8005a5e:	f025 0503 	bic.w	r5, r5, #3
 8005a62:	3508      	adds	r5, #8
 8005a64:	2d0c      	cmp	r5, #12
 8005a66:	bf38      	it	cc
 8005a68:	250c      	movcc	r5, #12
 8005a6a:	2d00      	cmp	r5, #0
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	db01      	blt.n	8005a74 <_malloc_r+0x1c>
 8005a70:	42a9      	cmp	r1, r5
 8005a72:	d905      	bls.n	8005a80 <_malloc_r+0x28>
 8005a74:	230c      	movs	r3, #12
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	2600      	movs	r6, #0
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a80:	4e2e      	ldr	r6, [pc, #184]	; (8005b3c <_malloc_r+0xe4>)
 8005a82:	f000 f89d 	bl	8005bc0 <__malloc_lock>
 8005a86:	6833      	ldr	r3, [r6, #0]
 8005a88:	461c      	mov	r4, r3
 8005a8a:	bb34      	cbnz	r4, 8005ada <_malloc_r+0x82>
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4638      	mov	r0, r7
 8005a90:	f7ff ffc2 	bl	8005a18 <sbrk_aligned>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	4604      	mov	r4, r0
 8005a98:	d14d      	bne.n	8005b36 <_malloc_r+0xde>
 8005a9a:	6834      	ldr	r4, [r6, #0]
 8005a9c:	4626      	mov	r6, r4
 8005a9e:	2e00      	cmp	r6, #0
 8005aa0:	d140      	bne.n	8005b24 <_malloc_r+0xcc>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	eb04 0803 	add.w	r8, r4, r3
 8005aac:	f000 f878 	bl	8005ba0 <_sbrk_r>
 8005ab0:	4580      	cmp	r8, r0
 8005ab2:	d13a      	bne.n	8005b2a <_malloc_r+0xd2>
 8005ab4:	6821      	ldr	r1, [r4, #0]
 8005ab6:	3503      	adds	r5, #3
 8005ab8:	1a6d      	subs	r5, r5, r1
 8005aba:	f025 0503 	bic.w	r5, r5, #3
 8005abe:	3508      	adds	r5, #8
 8005ac0:	2d0c      	cmp	r5, #12
 8005ac2:	bf38      	it	cc
 8005ac4:	250c      	movcc	r5, #12
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7ff ffa5 	bl	8005a18 <sbrk_aligned>
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d02b      	beq.n	8005b2a <_malloc_r+0xd2>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	442b      	add	r3, r5
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	e00e      	b.n	8005af8 <_malloc_r+0xa0>
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	1b52      	subs	r2, r2, r5
 8005ade:	d41e      	bmi.n	8005b1e <_malloc_r+0xc6>
 8005ae0:	2a0b      	cmp	r2, #11
 8005ae2:	d916      	bls.n	8005b12 <_malloc_r+0xba>
 8005ae4:	1961      	adds	r1, r4, r5
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	6025      	str	r5, [r4, #0]
 8005aea:	bf18      	it	ne
 8005aec:	6059      	strne	r1, [r3, #4]
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	bf08      	it	eq
 8005af2:	6031      	streq	r1, [r6, #0]
 8005af4:	5162      	str	r2, [r4, r5]
 8005af6:	604b      	str	r3, [r1, #4]
 8005af8:	4638      	mov	r0, r7
 8005afa:	f104 060b 	add.w	r6, r4, #11
 8005afe:	f000 f865 	bl	8005bcc <__malloc_unlock>
 8005b02:	f026 0607 	bic.w	r6, r6, #7
 8005b06:	1d23      	adds	r3, r4, #4
 8005b08:	1af2      	subs	r2, r6, r3
 8005b0a:	d0b6      	beq.n	8005a7a <_malloc_r+0x22>
 8005b0c:	1b9b      	subs	r3, r3, r6
 8005b0e:	50a3      	str	r3, [r4, r2]
 8005b10:	e7b3      	b.n	8005a7a <_malloc_r+0x22>
 8005b12:	6862      	ldr	r2, [r4, #4]
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	bf0c      	ite	eq
 8005b18:	6032      	streq	r2, [r6, #0]
 8005b1a:	605a      	strne	r2, [r3, #4]
 8005b1c:	e7ec      	b.n	8005af8 <_malloc_r+0xa0>
 8005b1e:	4623      	mov	r3, r4
 8005b20:	6864      	ldr	r4, [r4, #4]
 8005b22:	e7b2      	b.n	8005a8a <_malloc_r+0x32>
 8005b24:	4634      	mov	r4, r6
 8005b26:	6876      	ldr	r6, [r6, #4]
 8005b28:	e7b9      	b.n	8005a9e <_malloc_r+0x46>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f000 f84c 	bl	8005bcc <__malloc_unlock>
 8005b34:	e7a1      	b.n	8005a7a <_malloc_r+0x22>
 8005b36:	6025      	str	r5, [r4, #0]
 8005b38:	e7de      	b.n	8005af8 <_malloc_r+0xa0>
 8005b3a:	bf00      	nop
 8005b3c:	20012f8c 	.word	0x20012f8c

08005b40 <_realloc_r>:
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	4680      	mov	r8, r0
 8005b46:	4614      	mov	r4, r2
 8005b48:	460e      	mov	r6, r1
 8005b4a:	b921      	cbnz	r1, 8005b56 <_realloc_r+0x16>
 8005b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b50:	4611      	mov	r1, r2
 8005b52:	f7ff bf81 	b.w	8005a58 <_malloc_r>
 8005b56:	b92a      	cbnz	r2, 8005b64 <_realloc_r+0x24>
 8005b58:	f7ff ff12 	bl	8005980 <_free_r>
 8005b5c:	4625      	mov	r5, r4
 8005b5e:	4628      	mov	r0, r5
 8005b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b64:	f000 f838 	bl	8005bd8 <_malloc_usable_size_r>
 8005b68:	4284      	cmp	r4, r0
 8005b6a:	4607      	mov	r7, r0
 8005b6c:	d802      	bhi.n	8005b74 <_realloc_r+0x34>
 8005b6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b72:	d812      	bhi.n	8005b9a <_realloc_r+0x5a>
 8005b74:	4621      	mov	r1, r4
 8005b76:	4640      	mov	r0, r8
 8005b78:	f7ff ff6e 	bl	8005a58 <_malloc_r>
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d0ed      	beq.n	8005b5e <_realloc_r+0x1e>
 8005b82:	42bc      	cmp	r4, r7
 8005b84:	4622      	mov	r2, r4
 8005b86:	4631      	mov	r1, r6
 8005b88:	bf28      	it	cs
 8005b8a:	463a      	movcs	r2, r7
 8005b8c:	f7ff fbb8 	bl	8005300 <memcpy>
 8005b90:	4631      	mov	r1, r6
 8005b92:	4640      	mov	r0, r8
 8005b94:	f7ff fef4 	bl	8005980 <_free_r>
 8005b98:	e7e1      	b.n	8005b5e <_realloc_r+0x1e>
 8005b9a:	4635      	mov	r5, r6
 8005b9c:	e7df      	b.n	8005b5e <_realloc_r+0x1e>
	...

08005ba0 <_sbrk_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4d06      	ldr	r5, [pc, #24]	; (8005bbc <_sbrk_r+0x1c>)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	4608      	mov	r0, r1
 8005baa:	602b      	str	r3, [r5, #0]
 8005bac:	f7fb f89c 	bl	8000ce8 <_sbrk>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_sbrk_r+0x1a>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_sbrk_r+0x1a>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20012f94 	.word	0x20012f94

08005bc0 <__malloc_lock>:
 8005bc0:	4801      	ldr	r0, [pc, #4]	; (8005bc8 <__malloc_lock+0x8>)
 8005bc2:	f000 b811 	b.w	8005be8 <__retarget_lock_acquire_recursive>
 8005bc6:	bf00      	nop
 8005bc8:	20012f98 	.word	0x20012f98

08005bcc <__malloc_unlock>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	; (8005bd4 <__malloc_unlock+0x8>)
 8005bce:	f000 b80c 	b.w	8005bea <__retarget_lock_release_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	20012f98 	.word	0x20012f98

08005bd8 <_malloc_usable_size_r>:
 8005bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bdc:	1f18      	subs	r0, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bfbc      	itt	lt
 8005be2:	580b      	ldrlt	r3, [r1, r0]
 8005be4:	18c0      	addlt	r0, r0, r3
 8005be6:	4770      	bx	lr

08005be8 <__retarget_lock_acquire_recursive>:
 8005be8:	4770      	bx	lr

08005bea <__retarget_lock_release_recursive>:
 8005bea:	4770      	bx	lr

08005bec <_init>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	bf00      	nop
 8005bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf2:	bc08      	pop	{r3}
 8005bf4:	469e      	mov	lr, r3
 8005bf6:	4770      	bx	lr

08005bf8 <_fini>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr
